<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="Logistics" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="3.05523 3.29192 1.46452" at="-3.92978 1.10641 3.35519" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="-1" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
        <Object name_suffix="0" base_name="Rohling" name_space="__global__" type="Geometry" pickable="0" visible="0" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" sourcetype="2" sourceparam="Rohling.dae ShapeIndexedFaceSet0"/>
        <Object name_suffix="1" base_name="Rohling" name_space="__global__" type="Geometry" pickable="0" visible="0" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" sourcetype="2" sourceparam="Rohling.dae ShapeIndexedFaceSet0"/>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="Auftrag" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if (anzahl &lt; 1):
		print "Kann keinen Auftrag für &lt;1 Felgen starten. Abbruch."
		return
	
	if hasattr(VR,'containers'):
		if(VR.containers[0].isEmpty()): #Alisa sagt: da müssen wir nochmal überlegen wie viel sinn das macht.
			print "Starte Auftrag für " + str(anzahl) + " Felgen Typ " + str(modell)
			VR.auftragFertig = False # Ja ich weiß dass das noch woanders gemacht wird. sicher ist sicher.
			VR.auftragModell = modell
			
			VR.containers[0].setCapacity(anzahl)
			VR.containers[3].clear()
			VR.containers[3].setCapacity(anzahl)
			VR.log.fillContainer(VR.containers[0],anzahl,VR.FRrohling)
		else:
			print "Container0 (Lager) ist noch nicht leer! Starte Auftrag nicht."
		
	
	else:
		print "Achtung! Container noch nicht initialisiert!"
</core>
      <arg type="int" value="50" name_suffix="0" base_name="anzahl" name_space="Auftrag"/>
      <arg type="int" value="0" name_suffix="0" base_name="modell" name_space="Auftrag"/>
    </Script>
    <Script name_suffix="0" base_name="AuftragWarteschlange" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import collections
	
	if not hasattr(VR,'auftragqueue'):
		VR.auftragqueue = collections.deque() # Enthält Aufträge in der Form [Anzahl,Modell]
	if not hasattr(VR, 'auftragFertig'):
		VR.auftragFertig = True
	
	if (VR.auftragFertig and (not (len(VR.auftragqueue) == 0))):
		print "TODO starte auftrag."
		VR.auftragFertig = False
		
		auftragtupel = VR.auftragqueue.pop()
		VR.Auftrag(auftragtupel[0],auftragtupel[1])
		# Status update
		VR.monitorStatusController.updateProductionQueue()
		VR.monitorStatusController.setCurrentJob(auftragtupel)
		
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="500" key="0" name_suffix="9" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="Environment" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	reload = False
	light = VR.getRoot().find('Headlight')
	
	

	#halle
	if True:
		if hasattr(VR, 'halle'):
			VR.halle.destroy()
		VR.halle = VR.loadGeometry('halle.dae', reload)
		light.addChild(VR.halle)
		VR.halle.translate(0,0,20)
		VR.halle.rotate(0,-1,0, -0.5 * math.pi)

	#yellow stripes
	if True:
		if hasattr(VR, 'stripes'):
			VR.stripes.destroy()
		VR.stripes = VR.loadGeometry('yellow_stripes.dae', reload)
		light.addChild(VR.stripes)
		VR.stripes.translate(-4,0.22,4)
		VR.stripes.rotate(0,-1,0, -0.5 * math.pi)


	#fliessband
	count = 4;
	while count &gt;0:
		VR.fliessband = VR.loadGeometry('fliessband.dae', reload)
		light.addChild(VR.fliessband)
		VR.fliessband.translate(8.25-3.001*count,-0.6,1.4)
		VR.fliessband.setScale(0.3,0.3,0.3);
		VR.fliessband.rotate(1,0,0, -0.5 * math.pi)
		count = count -1;
	count = 4;
	while count &gt;0:
			VR.fliessband = VR.loadGeometry('fliessband.dae', reload)
			light.addChild(VR.fliessband)
			VR.fliessband.translate(7.25-3.001*count,-0.6,7.4)
			VR.fliessband.setScale(0.3,0.3,0.3);
			VR.fliessband.rotate(1,0,0, -0.5 * math.pi)
			count = count -1;
			
			
	#Kontrollmonitor
	VR.monitorControl = VR.loadGeometry('monitor.dae', reload)
	VR.monitorControl.setName('Kontrollmonitor')
	VR.monitorControl.setPose([0,0.5,0.12],[0,-1,0],[0,0,1])
	VR.monitorControl.setScale([0.9,0.9,0.9])#0.9 fuer 4:3 Bildschirm
	light.addChild(VR.monitorControl)	
	
	#Statusmonitor
	VR.monitorStatus = VR.loadGeometry('monitor.dae', reload)
	VR.monitorStatus.setName('Statusmonitor')
	VR.monitorStatus.setPose([2.5,0.5,0.12],[0,-1,0],[0,0,1])
	VR.monitorStatus.setScale([0.9,0.9,0.9])#0.9 fuer 4:3 Bildschirm
	light.addChild(VR.monitorStatus)
	
	#Tisch Kontrollmonitor
	VR.tischMonitorControl = VR.loadGeometry('Tisch.dae', reload)
	VR.tischMonitorControl.setName('Kontrollmonitortisch')
	VR.tischMonitorControl.setPose([0,-0.2,0.12],[0,-1,0],[0,0,1])
	VR.tischMonitorControl.setScale([0.5,0.5,0.5])
	light.addChild(VR.tischMonitorControl)

	
	#Tisch Statusmonitor
	VR.tischMonitorStatus = VR.loadGeometry('Tisch.dae', reload)
	VR.tischMonitorStatus.setName('Kontrollmonitortisch')
	VR.tischMonitorStatus.setPose([2.5,-0.2,0.12],[0,-1,0],[0,0,1])
	VR.tischMonitorStatus.setScale([0.5,0.5,0.5])
	light.addChild(VR.tischMonitorStatus)
	
	#Tisch am Ende vom ersten Fliessband
	VR.platte = VR.loadGeometry('Tisch.dae',reload)
	VR.platte.setName('Ablageplatte')
	p1 = VR.pfad1_endpunkt
	VR.platte.setPose([p1[0]-0.43,p1[1]-0.96,p1[2]],[0,-1,0],[0,0,1])
	VR.platte.setScale([0.5,0.5,0.5])
	light.addChild(VR.platte)

</core>
    </Script>
    <Script name_suffix="0" base_name="FraeseAnimation" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	VR.fraeseController.stop()
	VR.FraeseControl(VR.getRoot().find('Headlight'))
	VR.speedup = 0.2
	d = VR.FRrohling.duplicate()
	#print "M1",VR.FRrohling.getMaterial().getName(),"M2",d.getMaterial().getName()
	
	
	VR.fraeseController.startFraese(d,1)

</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="102" name_suffix="11" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="FraeseControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	Pi = math.pi
	debugDoor = False
	debugdraw = True
	
	generateHoles = True
	substract = True
	
	_animationTime = 50
	_animationOffset = 0
	
	def sub(a,b):
		return [a[0]-b[0],a[1]-b[1],a[2]-b[2]]
	def add(a,b):
		return [a[0]+b[0],a[1]+b[1],a[2]+b[2]]
	def mult(a,b):
		return [a*b[0],a*b[1],a*b[2]]
	
	class FraeseController:
		def __init__(self,r):
			print "initialisiere Fraesenklasse"
			VR.speedup = 0.1 # 1 = kein speedup
			
			self.scale = 1
			self.iscale = 1.0/self.scale
			self.pose = [-7,1.3,3]
			#self.ablegepunkt_local = [0.329,-0.01,0.371]
			self.ablegepunkt_local = [0.987,-0.03,1.113]
			self.isActive = False
			
			VR.fraese_ablegepunkt = add(self.pose,mult(self.scale,self.ablegepunkt_local))
		
			
			#load Geometry
			#self.Base = VR.loadGeometry('Base.DAE')
			#self.LeftDoor = VR.loadGeometry('TrLinks.DAE')
			#self.RightDoor = VR.loadGeometry('TrRechts.DAE')
			#self.Arm1 = VR.loadGeometry('Arm1NEW.DAE')
			#self.Arm2 = VR.loadGeometry('Arm2NEW.DAE')
			#self.Motor = VR.loadGeometry('MotorNEW.DAE')
			
			self.Base = VR.loadGeometry('fraese/Base_LOW_POLY.dae')
			self.LeftDoor = VR.loadGeometry('fraese/TrLinks_LOW_POLY.dae')
			self.RightDoor = VR.loadGeometry('fraese/TrRechts_LOW_POLY.dae')
			self.Arm1 = VR.loadGeometry('fraese/Arm1_LOW_POLY.dae')
			self.Arm2 = VR.loadGeometry('fraese/Arm2_LOW_POLY.dae')
			self.Motor = VR.loadGeometry('fraese/Motor_LOW_POLY.dae')
			
			self.LeftDoor.setFrom([1.02, 0, 0])
			self.RightDoor.setFrom([-0.43, 0, 0])			
			self.Base.addChild(self.LeftDoor)
			self.Base.addChild(self.RightDoor)
			self.Base.addChild(self.Arm1)
			self.Base.addChild(self.Arm2)
			self.Base.addChild(self.Motor)
			
			
			self.Base.setPose(self.pose,[1,0,0],[0,1,0])
			self.Base.setScale(self.scale,self.scale,self.scale)
			self.Base.setName("Fraese")
			r.addChild(self.Base)

			#Door close (invert will nicht)
			self.p1c = VR.Path()
			self.p1c.set([1.02,0,0], [0,0,-1], [0,1,0],[0,0,0], [0,0,-1], [0,1,0], 2)
			self.p2c = VR.Path()
			self.p2c.set([-0.43,0,0], [0,0,-1], [0,1,0],[0.62,0,0], [0,0,-1], [0,1,0], 2)
			#Door open
			self.p1o = VR.Path()
			self.p1o.set([0,0,0], [0,0,-1], [1.02,0,0], [0,0,-1], 2)
			self.p2o = VR.Path()
			self.p2o.set([0.62,0,0], [0,0,-1], [-0.43,0,0], [0,0,-1], 2) 
	
			self.doorOpen = True
			self.debugdraw = None
			
			b=0.005
			self.prof = []
			self.prof.append([-b,0,b])
			self.prof.append([-b,0,-b])
			self.prof.append([b,0,-b])
			self.prof.append([b,0,b])
	
			
		def startFraese(self,rohling,modell):
			print "Starte Fräsvorgang",rohling.getName(),"Speedup",VR.speedup
			self.isActive = True
			
			#rohling positionieren
			self.Base.addChild(rohling)
			rohling.setName("Rohling.Aktuell")
			rohling.setFrom(self.ablegepunkt_local)
			rohling.setScale(self.iscale ,self.iscale,self.iscale )
			rohling.show()
			
			self.rohling = rohling
			self.modell = modell
			
			self.deleteDebugdraw()
			
			self.Base.addChild(self.debugdraw)

			
			#fräsen
			self.useDoor()
			#Statusmeldung
			VR.monitorStatusController.setFraeseStatus("fraest")
			VR.monitorStatusController.updateHomepage()
			if modell == 0:
				self.nextGCode(VR.ParseGCode("NewModell1.nc"))
			else:
				self.nextGCode(VR.ParseGCode("NewModell2.nc"))

		def nextGCode(self,parser):
			if not self.isActive:
				return
		
			if parser.hasNext():
				#parsen returns [p1, p2, p3, pd, loch (None oder True), Zeit]
				paths = parser.ParseLine()
				if paths is  None:
					print "Error paths empty"
					self.nextGCode(parser)
					return
				
				#debugdraw
				if debugdraw:
					s = VR.Stroke('path')
					s.addPath(paths[3])
					s.strokeProfile(self.prof, True, True)
					self.debugdraw.addChild(s)
				
				#abtrag
				self.abtrag(paths[4])
				
				#animieren
				self.Motor.animate(paths[0], paths[5]*VR.speedup, 0, False)
				self.Arm2.animate(paths[1], paths[5]*VR.speedup, 0, False)
				self.Arm1.animate(paths[2], paths[5]*VR.speedup, 0, False)
				#rekursiver Aufruf
				VR.stackCall( self.nextGCode, paths[5]*VR.speedup , [parser] )
			else:
				self.stop()
		
		def abtrag(self,path):
			if  generateHoles and path is not None:
				#Profile
				center =path[0];
				prof2 = [[+p[2]-center[2],p[0]-center[0], 0 ] for p in path ]					

				col = [1,0,0]
				up = [1,0,0]
	
				#Path
				p = VR.Path()
				p.addPoint([center[0],center[1],center[2]],[0,-1,0],col,up)
				p.addPoint([center[0],-0.1,center[2]],[0,-1,0],col,up) #0.12 ist der deubig offset aus ParseGCode
				p.compute(10)
				
				#Stroke
				s = VR.Stroke('path')
				s.addPath(p)
				s.strokeProfile( prof2, True, True) 

				if substract:
					# CSG
					csg = VR.CSGGeometry('csg')
					self.rohling.switchParent(csg)
					csg.setThreshold(1e-4, 1e-8)
					mat = self.rohling.getMaterial()
					#print "Material",mat,mat.getName()
					csg.setMaterial(mat)
					csg.addChild(s)
					self.Base.addChild(csg)	
					csg.setOperation('subtract')
					csg.setEditMode(False)
					csg.setMaterial(mat)
					self.rohling = csg
				else : 
					self.debugdraw.addChild(s)

		def stop(self):#fertig - callback an Logistik
			if not self.isActive:
				print "Sopping but not active"
				return

			#tür auf
			self.useDoor()
			
			
			#Felge erzeugen
			if self.modell == 0:
				objekt = VR.FRfelge0.duplicate()
			else :
				objekt = VR.FRfelge1.duplicate()
			objekt.setFrom(self.ablegepunkt_local)
			objekt.show()
			
			self.rohling.destroy()
			self.Base.addChild(objekt)
			
			print "Fraesevorgang done, call back Logistik"
			#Statusmeldung
			VR.monitorStatusController.setFraeseStatus("Fraesvorgang beendet")
			VR.monitorStatusController.updateHomepage()
			
			self.isActive = False
			
			self.deleteDebugdraw()
			#VR.logisticController.fraeseDone(objektback)
			VR.logisticController.fraeseDone(objekt)
			
		def deleteDebugdraw(self):
			if self.debugdraw is not None:
				self.debugdraw.destroy()
			self.debugdraw = VR.Transform("debugdraws")
					
		def useDoor(self):
			if self.doorOpen and not debugDoor:	
				#Statusmeldung
				VR.monitorStatusController.setFraeseStatus("schliesse Tuer")
				VR.monitorStatusController.updateHomepage()
				
				self.LeftDoor.animate(self.p1c, 1, 0, True)
				self.RightDoor.animate(self.p2c, 1, 0, True)
			else:
				#Statusmeldung
				VR.monitorStatusController.setFraeseStatus("oeffne Tuer")
				VR.monitorStatusController.updateHomepage()
				
				self.LeftDoor.animate(self.p1o, 1, 0, True)
				self.RightDoor.animate(self.p2o, 1, 0, True)
			self.doorOpen = not self.doorOpen
			
		def destroy(self):
			if self.Base is not None:
				self.Base.destroy()
		
	if hasattr(VR, 'fraeseController') and VR.fraeseController is not None:
		VR.fraeseController.destroy()
	VR.fraeseController = FraeseController(root)	

</core>
      <arg type="VRPyGeometryType" value="Headlight" name_suffix="0" base_name="root" name_space="FraeseControl"/>
    </Script>
    <Script name_suffix="0" base_name="LogisticsControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#Pseudo-Enums für Zustände, da ich nicht weiß, wie man das in Python anständig macht
	VR.states_WaitForRohling = 0
	VR.states_MoveRohlingToFraese = 1
	VR.states_RohlingInFraese = 2
	VR.states_MoveFelgeToBand = 3
	VR.currentState = VR.states_WaitForRohling
	
	#objekt: Sollte mindestens vom Typ Geometry sein, damit wir die Position abfragen können.
	
	
	class LogisticController:
		def __init__(self):
			print "initialisiere LogisticController"
		
		def moveDone(self,objekt):
			print "moveDone called, state: " + str(VR.currentState)
			if (VR.currentState == VR.states_MoveRohlingToFraese):
				VR.currentState = VR.states_RohlingInFraese
				modell = VR.auftragModell
				print "Modell:",modell
				VR.fraeseController.startFraese(objekt,modell)
			elif (VR.currentState == VR.states_MoveFelgeToBand):
				VR.currentState = VR.states_WaitForRohling
				# Achtung, nicht direkt wieder roboter rohling aufnehmen lassen,
				# Ich hab hier sonst etwas Angst vor Endlosrekursion! Gehe lieber erstmal in Zustand Warten,
				# Klasse mit regelmäßigem Update reagiert darauf.
				print "Felge done. Place on band."
				product = VR.log.addProduct(objekt)
				VR.containers[2].add(product)
			else:
				print "Achtung! moveDone called, aber Zustand passt nicht!"
				
						
		def fraeseDone(self,objekt):
			objekt.show()
			print "fraeseDone called"
			if (VR.currentState == VR.states_RohlingInFraese):
				VR.currentState = VR.states_MoveFelgeToBand
				startpunkt = VR.fraese_ablegepunkt
				endpunkt = VR.pfad2_startpunkt
				startrichtung = [-1,0,0]#TODO das ist grade nur waagrendpunktecht rein. Vllt muss das noch bisschen von Oben oder so.
				endrichtung = [0,1,0]
				#Die Pfade verschwinden sonst komischer weise 8-)
				VR.robo_path2 = [[-6.5, 5, 4],[-6.5, 1.5, 4],[-7 - 1.113, 1.3 + 0.03727 , 3 + 0.987],[-6.5, 1.5, 4],[-6.5, 5, 4],[-4, 3, 7],VR.pfad2_startpunkt ,[-4, 3, 7],[0, 4, 4]]
				VR.robo_path2_grab = 3
				VR.robo_path2_drop = 7
				
				#VR.robotController.move(startpunkt,startrichtung,endpunkt,endrichtung,objekt)
				VR.robotController.movePath(VR.robo_path2, VR.robo_path2_grab, VR.robo_path2_drop, objekt, VR.logisticController.moveDone, objekt)
			else:
				print "Achtung! Fraese fertig, aber Zustand passt nicht!"
				
		def start(self,product):
			print "Starte neuen Beweg-und-Fräs-Vorgang"
			VR.currentState =  VR.states_MoveRohlingToFraese
			startpunkt = VR.pfad1_endpunkt
			endpunkt = VR.fraese_ablegepunkt
			geo = product.getGeometry()
			#Die Pfade verschwinden sonst komischer weise 8-)
			VR.robo_path1 = [[-4.1, 1.1, 1.3],VR.pfad1_endpunkt, [-4.5, 4, 1], [-6, 4, 4],[-7.5, 2, 4],[-7 - 1.113, 1.3 + 0.03727 , 3 + 0.987] ,[-6.5, 1.5, 4],[-6.5, 5, 4],[0, 4, 4]]
			VR.robo_path1_grab = 2
			VR.robo_path1_drop = 6
			
			VR.robotController.movePath(VR.robo_path1, VR.robo_path1_grab, VR.robo_path1_drop, geo, VR.logisticController.moveDone, geo)
			#VR.robotController.move(startpunkt,startrichtung,endpunkt,endrichtung,geo)
			

		
		
	VR.logisticController = LogisticController()
		
		

</core>
    </Script>
    <Script name_suffix="0" base_name="LogisticsInit" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	r = VR.getRoot().find('Headlight')
	pathNodes = VR.Object('pathsNodes')
	r.addChild(pathNodes)

	
	# ------------ paths -----------------

	#Pfade: (a,1,1) zu (b,1,1): Fließband zu erster box
	# (b,1,1) zu (b,1,c): erste Box zu zweiter Box (kein Fließband, nur zum Produktflussmodellieren
	# (b,1,c) zu (d,1,c): Fließband ins Lager.
	# Ist grade am Einfachsten, die Fließbänder erstmal geradeaus parallel zur x-Achse laufen zu lassen.
	
	p0_length = 10 #Muss mindestens 3 sein, Beeinflusst den Abstand der Produkte auf dem Band. Bei nur 2 Punkten (Start und Ende) spinnt der Container.
	p2_length = 10 #Muss mindestens 3 sein, Beeinflusst den Abstand der Produkte auf dem Band. Bei nur 2 Punkten (Start und Ende) spinnt der Container.

	speed0 = 3.8 # Geschwindigkeit erstes Fließband
	speed2 = 2.0 # Geschwindigkeit zweites Fließband

	p0_startx = 8.0
	p0_endx = -4.0

	p2_startx = -4.0
	p2_endx = 8.0
	
	p_y = 1
	p0_z = 1
	p2_z = 7
	
	#Positionen für Roboteranimation:
	VR.pfad1_endpunkt = [p0_endx,p_y,p0_z]
	VR.fraese_ablegepunkt = [-8.0,3,3.5]
	#keine lust dem oben nach zu gehen
	VR.fraese_fuer_robo = [-7 - 1.113, 1.3 + 0.03727 , 3 + 0.987]
	VR.pfad2_startpunkt = [p2_startx+0.3,p_y,p2_z]
			
	# Pfad vom Lager zur ersten Kiste
	nodes1 = []
	p0_geolength = p0_endx - p0_startx
	for x in range (0,p0_length):		# Verteile gleichmäßig Stationen auf dem Fließband. Falls die unregelmäßig sind kommt der Fluss ins Stocken, und im schlimmsten Fall kommen die Produkte gar nicht erst am Ende an.
		node = VR.Transform('node')
		node.setFrom(p0_startx + p0_geolength*x/(p0_length-1),p_y,p0_z)
		node.setDir(0.1,0,0)
		pathNodes.addChild(node)
		nodes1.append(node)
		

	# Pfad von zweiter Kiste ins Lager
	nodes2 = []
	p2_geolength = p2_endx - p2_startx
	for x in range (0,p2_length):
		node = VR.Transform('node')
		node.setFrom(p2_startx + p2_geolength*x/(p2_length-1),p_y,p2_z)
		node.setDir(-1,0,0)
		pathNodes.addChild(node)
		nodes2.append(node)

	# Bis hierher werden nur die Wege mit den Haltepunkten erstellt, die Container sind noch nicht da.


	# ------------ logistics -------------
	
	if not hasattr(VR, 'log'):
		VR.log = VR.Factory.Logistics()
		VR.lnet = VR.log.addNetwork()
		r.addChild(VR.cardbox)
		r.addChild(VR.rohling)
		#r.addChild(VR.felge1)
		#r.addChild(VR.FRfelge0)
		#r.addChild(VR.FRfelge1)
		r.addChild(VR.FRrohling)
	
	capacity0 = 0 # ins Lager passt viel
	capacity1 = 1	# ist grade erstmal weniger, damit alles übersichtlich bleibt. Kann später gern mehr werden
	capacity2 = 10 # Hier steht am Ende eh keine Box, es wird alles direkt aufs Fließband gelegt. Kapazität sollte egal sein.
	capacity3 = 1000 # Endlager
	
	c0 = VR.log.addContainer(VR.cardbox)
	c0.setCapacity(capacity0)
	c1 = VR.log.addContainer(VR.cardbox)
	c1.setCapacity(capacity1)
	c2 = VR.log.addContainer(VR.cardbox)
	c2.setCapacity(capacity2)
	c3 = VR.log.addContainer(VR.cardbox)
	c3.setCapacity(capacity3)

	VR.containers = [c0,c1,c2,c3]

	

	# Pfad 0:
	lp = VR.log.addPath()
	n0 = None
	nodes = []
	
	for h in nodes1:
		n = VR.lnet.addNodes(1,n0)
		nodes.append(n)
		n.setTransform(h)
		n0 = n
		lp.add(n)
		nodes.append(n)
	nodes[0].set(c0)
	nodes[-1].set(c1)
	#VR.log.fillContainer(c0,capacity0,VR.product) #TODO (Alisa): Rausfinden, wie man regeln kann, dass nur ein bestimmter Anteil des aktuellen Füllstands losgeschickt wird.

	t1 = VR.log.addTransporter('Transporter_Rohling')
	t1.setPath(lp)
	t1.setSpeed(speed0)


	#Pfad 2:
	lp = VR.log.addPath()
	n2 = None
	nodes = []
	
	for h in nodes2:
		n = VR.lnet.addNodes(1,n2)
		nodes.append(n)
		n.setTransform(h)
		n2 = n
		lp.add(n)
		nodes.append(n)
	nodes[0].set(c2)
	nodes[-1].set(c3)
		
	t2 = VR.log.addTransporter('Transporter_Felge')
	t2.setPath(lp)
	t2.setSpeed(speed2)

</core>
    </Script>
    <Script name_suffix="0" base_name="LogisticsUpdate" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	if not hasattr(VR,'neuerauftrag_count'):
		VR.neuerauftrag_count = 1
	if not hasattr(VR, 'neuerauftrag_model'):
		VR.neuerauftrag_model = 0
	
	#=====Logging=====
	
	if hasattr(VR, 'log'):
		VR.log.update()
		
		
	#=====Starte einen Roboter-Fräs-Durchlauf=====
	if hasattr(VR, 'containers') and hasattr(VR, 'currentState'):
		if not VR.containers[1].isEmpty():
			VR.containers[1].peek().getGeometry().show()
		if (VR.currentState == VR.states_WaitForRohling and (not VR.containers[1].isEmpty())):
			c1 = VR.containers[1]
			product = c1.get()
			VR.logisticController.start(product)
	
	
	#=====Prüfe, ob Auftrag beendet=====
	if (hasattr(VR, 'containers')):
		if (VR.containers[3].isFull()):
			VR.auftragFertig = True
	
	
	
	# Wir kriegen wahrsch noch für die Container Notifications immer wenn ein neues Teil reinfällt,
	# brauchen wir für ne bessere Anzeige, wie viele Produkte fertig sind / durchgelaufen sind,
	# ohne auf die Anzeige fürs hintere Lager angewiesen zu sein oder komisch rumrechnen zu müssen
	# ist bestimmt auch für andere Sachen nützlich.
	# Wird in etwa so aussehen:
	
	#def f(e):
	#	print e
	#
	#container.addNotification(f)
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="ParseGCode" name_space="__script__" type="Python" mobile="">
      <core>
	import re
	import VR
	import math
	import numpy
	
	#notwendeig damit der pfad auch am Fräskopf ist
	#debug = [-0.02,0.12,0.138]
	debug = [+0.01,0.36,0.376]
	log = False
	
	#Path Scalingf
	#_scale = 0.0055
	
	_XOFFSET = -1.1#größer weg von der Start Pos #felge 1
	if filepath == "NewModell2.nc":
		_XOFFSET = -0.97#größer weg von der Start Pos#felge 1
	_YOFFSET = 4.02# größer weg von der Tür
	_ZOFFSET = -0.16#-0.215
	_scale = 0.019
	
	_XSCALE = _scale
	_YSCALE = _scale
	_ZSCALE = _scale
	
	#For line maching
	regexG00 = re.compile('G00.*')
	regexG01 = re.compile('G01.*')
	regexG02 = re.compile('G02.*')
	regexG03 = re.compile('G03.*')
	regexG17 = re.compile('G17.*')
	regexG18 = re.compile('G18.*')
	regexG19 = re.compile('G19.*')
	regexOther = re.compile('X-?[0-9]+\.?[0-9]* Y-?[0-9]+\.?[0-9]*.*')
	class Parser:

		def __init__(self,path):
			self.lastPos = [0,0,0]
			self.lastOrient = [0,0,-1]
			self.currentLine = 0
			self.plane = "Z"
			self.lines = []
			self.coordinates = []
			self.paths =[]
			
			with open(path) as file: 
				for line in file:
					if (regexG00.match(line) or regexG01.match(line) or regexG02.match(line) or regexG03.match(line) or regexG17.match(line) or regexG18.match(line) or regexG19.match(line)):
						self.lines.append(line)
					elif regexOther.match(line):
						newLine = self.lines[(len(self.lines) - 1)][:4] + line
						if log:	
							print "Replaced",newLine.rstrip()
						self.lines.append(newLine)
					else:
						if log:	
							print "Left out",line.rstrip()
			
		def hasNext(self):
			if self.currentLine &gt; len(self.lines) :# or self.currentLine &gt; 20:
				return False
			return True
			
		def ParseLine(self):
			def cross(a,b):
				return [a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]
			def sub(a,b):
				return [a[0]-b[0],a[1]-b[1],a[2]-b[2]]
			def add(a,b):
				return [a[0]+b[0],a[1]+b[1],a[2]+b[2]]
			def mult(a,b):
				return [a*b[0],a*b[1],a*b[2]]
			def lenght(a):
				return math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2])
			def normalize(a):
				temp = lenght(a)
				return [a[0]/temp,a[1]/temp,a[2]/temp]
			def dist(a,b):
				return lenght(sub(a,b))
					
			#returns [p1, p2, p3, pd, loch (None oder True), Zeit]
			
			compute = 5
			
			p1 = VR.Path()
			p2 = VR.Path()
			p3 = VR.Path()
			pd = VR.Path()
			
			def addPoint(p,d):
				d = normalize(d)
				p1.addPoint(p, d, [0,0,0], None)
				p2.addPoint([p[0], 0,p[2]], d, [0,0,0],  None)
				p3.addPoint([p[0], 0, 0], d, [0,0,0],  None)
				pd.addPoint(add(p,debug), d, [0,0,0],  None)

			#special Cases
			if self.currentLine == (len(self.lines)):
				print "Reset"
				addPoint(self.lastPos,sub([0,0,0],self.lastPos))
				addPoint([0,0,0],sub([0,0,0],self.lastPos))
				p1.compute(compute)
				p2.compute(compute)
				p3.compute(compute)
				pd.compute(compute)
				self.currentLine += 1
				return [p1,p2,p3,pd,None,1]
				
			line = self.lines[self.currentLine]
			self.currentLine += 1
			if log:	
				print line.rstrip()
				
			if regexG17.match(line):
				self.plane = "Z"
			
			if regexG18.match(line):
				self.plane = "Y"
			
			if regexG19.match(line):
				self.plane = "X"
			
			#init computing
			dirP1 = [0,0,1]
			newX = self.lastPos[0]
			newY = self.lastPos[1]
			newZ = self.lastPos[2]
			dirP2 = [0,0,1]
			
			centerX = self.lastPos[0]
			centerY = self.lastPos[1]
			centerZ = self.lastPos[2]
			time = 1
			
			#read Parameters
			#X
			tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
			m = tmpReg.search(line)
			if m:
				xCoord = m.group()
				newX = float(xCoord[1:]) * _XSCALE + _XOFFSET
			#Y
			tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
			m = tmpReg.search(line)
			if m:
				xCoord = m.group()
				newZ = -(float(xCoord[1:]) * _YSCALE) + _YOFFSET
			#Z
			tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
			m = tmpReg.search(line)
			if m:
				xCoord = m.group()
				newY = float(xCoord[1:]) * _ZSCALE + _ZOFFSET
			#I
			tmpReg = re.compile('I-?[0-9]+\.?[0-9]*')
			m = tmpReg.search(line)
			if m:
				coord = m.group()
				centerX += (float(coord[1:]) * _XSCALE)
			#J	
			tmpReg = re.compile('J-?[0-9]+\.?[0-9]*')
			m = tmpReg.search(line)
			if m:
				coord = m.group()
				centerZ += -(float(coord[1:]) * _YSCALE)
			#K
			tmpReg = re.compile('K-?[0-9]+\.?[0-9]*')
			m = tmpReg.search(line)
			if m:
				coord = m.group()
				centerY += (float(coord[1:]) * _ZSCALE)
				
			
			new = [newX, newY, newZ]
			center = [centerX,centerY,centerZ]
			
			#Match G-Code
			if regexG00.match(line):
				time = 1 
				dirP1 = sub(new,self.lastPos)
				dirP2 = dirP1
			if regexG01.match(line):
				time = 1.5 
				dirP1 = sub(new,self.lastPos)
				dirP2 = dirP1
			if (regexG02.match(line) or regexG03.match(line)):
				centerpos = sub(self.lastPos,center)
				centernew = sub(new,center)
				#Ebenen Normale
				n = cross(centernew,centerpos)
				#Kreistangenten auf der Ebene
				dirP1 = cross(centerpos,n)
				dirP2 = cross(centernew,n)

				time = 2
			
			#generate Paths	
			addPoint(self.lastPos,dirP1)
			addPoint(new,dirP2)
				
			if log:		
				print "P1",self.lastPos,"D1",dirP1,"P2",new,"D2",dirP2
			
			
			p1.compute(compute)
			p2.compute(compute)
			p3.compute(compute)
			pd.compute(compute)
			
			if dirP1[1] &lt; 0:#rein
				self.paths = []
				loch = None
			if dirP1[1] == 0:#fräast
				self.paths.append(pd)#pd damit es genau da ist wo die debugpfade
				loch = None
			if dirP1[1] &gt; 0:#raus
				loch = []
				for path in self.paths:
					for p in path.getPositions():
						loch.append(p)
					
			self.coordinates.append(new)
			self.lastPos = new
			#time * distance
			return [p1, p2, p3, pd, loch, time*lenght(sub(dirP2,self.lastPos))]
			
	
		

	return Parser(filepath)



				
</core>
      <arg type="str" value="NewModell1.nc" name_suffix="0" base_name="filepath" name_space="ParseGCode"/>
    </Script>
    <Script name_suffix="0" base_name="RobotAnimation" name_space="__script__" type="Python" mobile="">
      <core>
	import VR


	def fertig():
		print "fertig"
		
	VR.robotController.goTo([-7 - 1.113, 1.3 + 0.03727 , 3 + 0.987], None, None)
	#VR.robotController.goTo([-7 - 1.113,1.3 + 0.03, 3 + 0.987], None, None)
	#[-7,1.3,3] [0.987,-0.03,1.113]
	return
	
	if hasattr(VR, 'roh'):
				VR.roh.destroy()
	VR.roh = VR.loadGeometry('Rohling.dae',True)
	VR.getRoot().find('Headlight').addChild(VR.roh)
	
	
	
	eins = VR.pfad1_endpunkt
	zwei = VR.fraese_ablegepunkt
	drei = VR.pfad2_startpunkt
	
	path3 = [[-4.5, 1, 1],[-7 - 1.113, 1.3 + 0.03 , 3 + 0.987]]
	
	VR.roh.translate(-4.5, 1, 1)
	#VR.roh.translate(eins[0], eins[1], eins[2])
	#VR.roh.translate(zwei[0], zwei[1], zwei[2])
	#VR.roh.translate(drei[0], drei[1], drei[2])
	
	#VR.robotController.goTo(zwei, None)
	
	#print eins, zwei, drei
	#return
	path = [[-4.1, 1.1, 1.3],[-4.5, 1, 1], [-4.5, 4, 1], [-6, 4, 4],[-7.5, 2, 4],[-8.18, 1.5, 4],[-6.5, 1.5, 4],[-6.5, 5, 4],[0, 4, 4]]
	path2 = [[-4.1, 1.1, 1.3],[-4.5, 1, 1],[0, 4, 4]]
	#VR.robotController.movePath(path2, 2, 3, VR.roh, fertig)
	VR.robotController.movePath(path3, 1, 0, VR.roh, None, None)
	
	#VR.robotController.greifen()
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="103" name_suffix="3" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="RobotControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	Pi = math.pi
	
	class RobotController:
		#colorVector Konstante für die Animation
		c = [0,0,0]
		

		
	
		def __init__(self):
			#geometrie laden
			
			print "initialisiere Roboterklasse"
			if hasattr(VR, 'robot'):
				VR.robot.destroy()
				
			# Welcher Roboter soll geladen werden?
			
			# Ohne Farbe, ca 13k vertices
			#VR.robot = VR.loadGeometry('Alle_teile.dae', True)
			# Mit Farbe, ca 13k vertices
			VR.robot = VR.loadGeometry('AlleTeile_mitFarbe.dae', True)
			# Mit Farbe, ca 8k vertices
			#VR.robot = VR.loadGeometry('Roboter_8kV.dae', True)
			# Mit Farbe, ca 5k vertices
			#VR.robot = VR.loadGeometry('Roboter_5kV.dae', True)
			
			light = VR.getRoot().find('Headlight')
			light.addChild(VR.robot)
			VR.robot.rotate(1,0,0, -0.5 * math.pi)
			VR.robot.translate(-4,0,4)
			#RobotController.kalkuliereGreifPfad(self)
			
			#Winkel initalisieren
			self.winkelA1 = 0
			self.winkelA2 = 0
			self.winkelA3 = 0
			self.winkelA4 = 0
			self.winkelA5 = 0
			
			#Position zur späteren Unrechnung in relative Koordinaten
			self.StandPos = VR.getRoot().find('Stand').getWorldFrom()
			
			#Kein Arm bewegt sich
			self.movingArms = [0, 0, 0, 0, 0, 0]
			#Greifer ist geöffnet
			self.opened = True
			#kein greif oder loslass Punkt
			self.grab = 0
			self.drop = 0
			#keien Benarichtigungsmehtode
			self.notify = None
			self.notifyArgument = None
			#Kein Bewegungs Pfad gesetzt
			self.path = []
			#Kein Object zum Bewegen
			self.ObjectToMove = None
		
		#Einen Pfad Abfahren und an einem Punkt greifen und wieder Ablegen
		# path: liste von punkten mit [x , y, z] in Weltkoordinaten
		# grab: nummer des Punktes an dem "object" gegriffen wird, der erste Punkt ist 1
		#		wenn grab &lt;1 wird nichts gegriffen
		# drop: nummer des Punktes an dem "object" losgelassen wird, der erste Punkt ist 1
		#		wenn drop &lt;1 wird das Object nicht losgelassen
		# objekt: das Object, das bewegt werden soll, kann aber auch "none" gelassen werden
		# notify: Methode die Ausgeführt wird, wenn der Roboter wieder steht
		#		  Falls nichts aufgerufen werden soll "None" setzen  
		# notifyArgrument:  mit diesem argument wird die notify Funktion aufgerufen  
		#					sollte None sein fals notify kein Argument braucht                                       
		def movePath(self, path, grab, drop, objekt, notify, notifyArgument):
			print "Neuer Pfad wird abgefahren"
			# falls Path leer ist
			if len(path) &gt; 0:
				self.path = path
			else :
				return
				
			#Object setzen 
			if objekt is not None:
				self.ObjectToMove = objekt
		
			#drag and drop setzen
			if grab &lt;= len(self.path):
				self.grab = grab
			else :
				print "ungültige Grap position"
				return
			if drop &lt;= len(self.path):
				self.drop = drop
			else :
				print "ungültige Drop position"
				return
		
			#Zur ersten Position fahren
			firstPos = self.path[0]
			del self.path[0]
			
			self.goTo(firstPos, notify, notifyArgument)

		#Roboter zu eine Punkt mit Weltkoordinaten schicken
		# point: [x , y, z] in Weltkoordinaten
		# notify: mehthode die Aufgerufen wird wenn der Roboter wieder steht
		#		  Falls nichts aufgerufen werden soll "None" setzen
		def goTo(self, point, notify, notifyArgument):
			x = point[2] - self.StandPos[2] 
			y = point[0] - self.StandPos[0]
			z = point[1] - self.StandPos[1]
			
			#Statusmeldung
			VR.monitorStatusController.setRoboterStatus("Fährt zu (" + str(x) + "," + str(y) + "," + str(z) + ")")
			VR.monitorStatusController.updateHomepage()
			
			self.notify = notify
			self.notifyArgument = notifyArgument
			
			#BasisWinkel berechen
			baDeg = VR.base.calcBaseDegrees(x,y)
			#Neuen Koodinaten im 2D(x und y) für die Arme berechnen
			e_x, e_y, e_z = VR.base.translateCoordinates(x, y, z)
	
			#Mit neuen Koordinaten Arm Winkel berechnen
			w_a2, w_a3, w_a5 = VR.arm.calculateArmDegrees(e_x, e_z)
	
			#Winkel einstellen
			self.move_a1_to(baDeg)
			self.move_a2_to(w_a2)
			self.move_a3_to(w_a3 )
			#Gelenk 4 wird noch nicht unterstütz
			#self.move_a4(0)
			self.move_a5_to(w_a5)
		
		#Nächster Schritt einer Animation machen
		def nextStep(self):
			#Test ob gegriffen oder lossgelassen werden muss
			if self.grab == 1 and self.opened == True:
				self.greifen()
				if len(self.path) &gt; 0:
					return
			elif self.drop == 1 and self.opened == False:
				self.greifen()
				if len(self.path) &gt; 0:
					return
			
			#Falls das Gelenk manuell gedreht wurde
			if self.grab == 2 or self.drop == 2:
				self.move_a4_to(0)
			
			
			if len(self.path) &gt; 0:
			#grap und drop Dekrementieren
				self.grab -= 1
				self.drop -= 1
				self.goTo(self.path[0], self.notify, self.notifyArgument)
				del self.path[0]
			else :
				self.grap = 0
				self.drop = 0
				if self.notify is not None:
					if self.notifyArgument is None:
						self.notify()
					else :
						self.notify(self.notifyArgument)
					#Beides zurücksetzen
					self.notify = None	
					self.notifyArgument = None
		
		# Benachrtigungs funktionen aufrufen, wenn Roboter steht
		def endAnimation(self, armIndex):
			self.movingArms[armIndex] = 0
			allArms = 0
			for arm in self.movingArms:
				allArms += arm
			#Falls sich nichts mehr bewegt nächsten Schritt machen
			if allArms &lt;= 0:
				self.nextStep()		
		
		#Zum löschen
		def destroy(self):
			if hasattr(VR, 'robot'):
				VR.robot.destroy()
				
		#Arm1 bewegen
		def move_a1(self, winkel_deg):
			arm = VR.robot.find('r_Arm1')
			f = arm.getFrom()
			d = arm.getDir()
			u = arm.getUp()
			
			#Werte sichern
			self.winkelA1 += winkel_deg
			self.winkelA1 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA1)
			
			#Animation starten
			path = self.x_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			self.movingArms[0] = 1
			arm.animate(path,anTime,0,True)
			VR.stackCall(self.endAnimation, anTime, [0])
		#absolute gradzahl
		def move_a1_to(self, winkel_deg):
			self.move_a1(winkel_deg - self.winkelA1)
		
		#Degbug
		def hier(self):
			print "hier"
		
		#Arm2 bewegen
		def move_a2(self, winkel_deg):
			arm = VR.robot.find('r_Arm2')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			#Werte sichern
			self.winkelA2 += winkel_deg
			self.winkelA2 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA2)
			
			#Animation starten
			path = self.y_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			self.movingArms[1] = 1
			arm.animate(path,anTime,0,True)
			VR.stackCall(self.endAnimation, anTime, [1]) 
			
		#absolute gradzahl
		def move_a2_to(self, winkel_deg):
			self.move_a2(winkel_deg - self.winkelA2)
			
		#Arm3 bewegen
		def move_a3(self, winkel_deg):
			arm = VR.robot.find('r_Motor_oben')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			#Werte sichern
			self.winkelA3 += winkel_deg
			self.winkelA3 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA3)
			
			#Animation starten
			path = self.y_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			self.movingArms[2] = 1
			arm.animate(path,anTime,0,True)
			VR.stackCall(self.endAnimation, anTime, [2]) 
			
		#absolute gradzahl
		def move_a3_to(self, winkel_deg):
			self.move_a3(winkel_deg - self.winkelA3)
		
		#Arm4 bewegen
		def move_a4(self, winkel_deg):
			arm = VR.robot.find('r_Arm4')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			#Werte sichern
			self.winkelA4 += winkel_deg
			self.winkelA4 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA4)
			
			#Animation starten
			path = self.z_rotatePath(f, u, d, winkel_deg, winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			self.movingArms[3] = 1
			arm.animate(path,anTime,0,True)
			VR.stackCall(self.endAnimation, anTime, [3]) 
			
		#absolute gradzahl
		def move_a4_to(self, winkel_deg):
			self.move_a4(winkel_deg - self.winkelA4)
			
		#Arm5 bewegen
		def move_a5(self, winkel_deg):
			arm = VR.robot.find('r_Arm5')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			
			#Werte sichern
			self.winkelA5 += winkel_deg
			self.winkelA5 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA5)
			
			#Animation starten
			path = self.y_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			self.movingArms[4] = 1
			arm.animate(path,anTime,0,True)
			VR.stackCall(self.endAnimation, anTime, [4]) 
			
		#absolute gradzahl
		def move_a5_to(self, winkel_deg):
			self.move_a5(winkel_deg - self.winkelA5)
			
		#Greifen
		def greifen(self):
			if hasattr(RobotController, 'lpath'):
				RobotController.lpath.invert()
				RobotController.rpath.invert()
				
			else :
				#Position bekommen
				links = VR.getRoot().find('Arm_links')
				rechts = VR.getRoot().find('Arm_rechts')
				#feste Positionen für Hinweg
				lf = [0.24, 0.79, -0.00]
				lu = [0,0,1]
				ld = [0,-1,0]
	
				rf = [0.24, -0.80, 0.00]
				ru = [0,0,1]
				rd = [0,1,0]
				
				lf = links.getFrom()
				rf = rechts.getFrom()
	
				lpath = VR.Path()
				rpath = VR.Path()
				#Punkte hinzufügen linker Pfad
				new_lf = lf[:]
				new_lf[1] -= 0.17
				lpath.addPoint(lf,ld,VR.robotController.c,lu)
				lpath.addPoint(new_lf,ld,VR.robotController.c,lu)
	
				#rechten Pfad 
				new_rf = rf[:]
				new_rf[1] += 0.17
				rpath.addPoint(rf,rd,VR.robotController.c,ru)
				rpath.addPoint(new_rf,rd,VR.robotController.c,ru)
				#Pfade erstellen
				lpath.compute(80)
				rpath.compute(80)
				RobotController.lpath = lpath
				RobotController.rpath = rpath
				
		
			#Object anhängen
			if self.opened and self.ObjectToMove is not None:
				greifer = VR.getRoot().find('r_Greifer')		
				self.ObjectToMove.drag(greifer)	
			#Object abhängen
			elif self.ObjectToMove is not None:			
				self.ObjectToMove.drop()
				self.ObjectToMove = None
			
			self.opened = not self.opened
			#Arme bekommen			
			arm_l = VR.robot.find('Arm_links')
			arm_r = VR.robot.find('Arm_rechts')
			#Animation starten
			self.movingArms[5] = 1
			arm_l.animate(RobotController.lpath,1,0.1,False)
			arm_r.animate(RobotController.rpath,1,0.1,False)
			VR.stackCall(self.endAnimation, 1.1, [5]) 

				
		# Pfad für Drehung in der y-Achse
		def y_rotatePath(self, f, u, d, winkel_deg, zielWinkel_rad):
			zielVector = [math.sin(zielWinkel_rad),0,-math.cos(zielWinkel_rad)]
			path = VR.Path()
			path.addPoint(f,d,VR.robotController.c,u)
			if (winkel_deg == 180) | (winkel_deg == -180) :
				zwischenVec = [math.sin(zielWinkel_rad - (winkel_deg/2)),0,-math.cos(zielWinkel_rad - (winkel_deg/2))]
				path.addPoint(f,zwischenVec,RobotController.c,u)
				#del zwischenVec
			path.addPoint(f,zielVector,RobotController.c,u)
			path.compute(80)
			return path
			
		# Pfad für Drehung in der x-Achse
		def x_rotatePath(self, f, u, d, winkel_deg, zielWinkel_rad):
			zielVector = [math.sin(zielWinkel_rad),math.cos(zielWinkel_rad),0]
			path = VR.Path()
			path.addPoint(f,d,RobotController.c,u)
			if (winkel_deg == 180) | (winkel_deg == -180) :
				zwischenVec = [math.sin(zielWinkel_rad - (winkel_deg/2)),math.cos(zielWinkel_rad - (winkel_deg/2)),0]
				path.addPoint(f,d,RobotController.c,zwischenVec)#
			path.addPoint(f,d,RobotController.c,zielVector)
			path.compute(80)
			return path
			
		# Pfad für Drehung in der z-Achse
		def z_rotatePath(self, f, u, d, winkel_deg, zielWinkel_rad):
			up_zielVector = [0, math.cos(zielWinkel_rad), math.sin(zielWinkel_rad)]
			dir_zielVector =[0, math.sin(zielWinkel_rad), -math.cos(zielWinkel_rad)]
			path = VR.Path()
			path.addPoint(f,d,RobotController.c,u)
			if (winkel_deg == 180) | (winkel_deg == -180) :
				zwischenWinkel = zielWinkel_rad - (winkel_deg/2)
				up_zwischenVec = [0, math.cos(zwischenWinkel), math.sin(zwischenWinkel)]
				dir_zwischenVec =[0, math.sin(zwischenWinkel), -math.cos(zwischenWinkel)]
				path.addPoint(f, dir_zwischenVec,RobotController.c, up_zwischenVec)
			path.addPoint(f,dir_zielVector,RobotController.c,up_zielVector)
			path.compute(80)
			return path
			
		# Zeit für animation berechnen
		def animationTime(self, roationSpeed, winkel_deg):
			if math.fabs(winkel_deg) &gt; 180:
				winkel_deg = winkel_deg % 180
			anTime = math.fabs((roationSpeed / 2.0) * (winkel_deg/360.0))
			if anTime &lt; 1.0 :
				anTime = 1.0
			return anTime
			
		
		# Bringt den Roboter in Ausgangstellung
		def reset(self):
			self.move_a1(-self.winkelA1)
			self.move_a2(-self.winkelA2)
			self.move_a3(-self.winkelA3)
			self.move_a4(-self.winkelA4)
			self.move_a5(-self.winkelA5)
			#Statusmeldung
			VR.monitorStatusController.setRoboterStatus("Steht in Ausgangsstellung")
			VR.monitorStatusController.updateHomepage()
		
		#Fährt den Roboter nach oben, dreht ihn aber nicht
		def UpBack_to_base(self):
			self.move_a2_to(0)
			self.move_a3_to(0)
			self.move_a4_to(0)
			self.move_a5_to(0)
	#----- Klasse zu ende---
	
				
		
		
		
	#if hasattr(VR, 'robotController'):
	#	VR.robotController.destroy()
		
	VR.robotController = RobotController()
</core>
    </Script>
    <Script name_suffix="0" base_name="RobotKinematik" name_space="__script__" type="Python" mobile="">
      <core>
	import math
	import VR
	
	"""
	Roboter Längen
	
	Arm1: x: 0.78044 z:2.02554
	Arm2: 2.03995 z ab: 4.06549
	Arm3: 2.00356 x ab: 2.784
	Arm4: 1.066
	
	"""
	
	#Die Klasse für die Bodenplatte
	class Base:
		def __init__(self, diameter, height):
			self.Diameter = diameter
			self.Height = height	

		# Calculates to which position the Base has to turn
		def calcBaseDegrees(self, x, y):
			degrees = 0
			if (y == 0):
				if (x &gt;= 0):
					degrees = 90
				else:
					degrees = -90
			else:
				degrees = math.degrees(math.atan(x/y))
				if (x &lt; 0 and y &gt; 0):
					#oberer Linker Quadrant
					degrees += 360
				elif (y &lt; 0):
					#untere Quadranten
					degrees += 180
			return degrees
	
		# Translates the absolute X Y Z Coordinates into the Relative X and Z Coordinates for the arm calculations
		def translateCoordinates(self, x, y, z):#
			#Remove Height
			z -= self.Height
			# X, Y span the ground plane
			# calculate the length of the groundLine
			groundLine = math.sqrt(x ** 2 + y ** 2)
			# calculate Length and Degree (to groundPlane) of the room diagonal
			#roomDiagonal = math.sqrt(groundLine ** 2 + z ** 2)
			#roomDegrees = math.degrees(math.atan(z/groundLine))
			groundLine = groundLine - self.Diameter
			return groundLine, 0, z
	
	#Klasse für die Arme
	class Arm:
		def __init__(self, l1, l2, l3):
			self.L1 = l1
			self.L2 = l2
			self.L3 = l3

		def calculateArmDegrees(self, X, Y):
			#print "armx: " , X ," army:", Y
			X = X - self.L3	
			X = X * -1
		
			C2 = (X*X + Y*Y - self.L1*self.L1 - self.L2*self.L2)/(2 * self.L1 * self.L2)
			A1 = math.fabs(1 - (C2 * C2))
			S2 = math.sqrt(A1)
	
			K1 = self.L1 + self.L2 * C2
			K2 = self.L2 * S2

			theta = math.atan2( Y, X ) - math.atan2( K2 , K1)  #angle: theta * 180/pi  (fur alpha 180 - theta)
	
			psi = math.atan2( S2, C2)    #angle: psi * 180/pi  (fur Beta 180 - psi)
		
			alpha = 180 - (theta * 180 / math.pi)
			beta = 180 - ( psi * 180 / math.pi)
			#print 'theta: ', theta, 'psi: ', psi, 'K1: ', K1, 'K2: ', K2
			delta = -alpha - beta + 180
			alpha = alpha - 90
			beta = beta - 90
			return alpha, beta, delta

	
		def calculateArmXY(self, alpha, beta):
			J1X =cos(alpha * math.pi /180)* self.L1
			J1Y =sin(alpha * math.pi /180)* self.L1
	
			J2X =cos((beta + alpha) * math.pi/180)* self.L2 + J1X
			J2Y =sin((beta + alpha)* math.pi/180)* self.L2 + J1Y
	
			return J2X, J2Y
		
			
			
	VR.arm = Arm(2.03995, 2.00356, 1.066)
	VR.base = Base(0.78044, 2.02554)
			
			
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="initScene" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# materials
	
	mbricks = VR.Material('mbricks')
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.95
	tg.add('Perlin', 1, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/4, [cp,cp,cp], [1,1,1])
	tg.add('Bricks', 1, [0.4,0.4,0.4], [1,1,1])
	mbricks.setTexture(tg.compose(0))
	

	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)
	mchrome = VR.Material('mchrome')
	setMetalic(mchrome, 0.25, 0.4, 0.77, 0.6)
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.6
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	mchrome.setTexture(tg.compose(0))
	mchrome.addPass()
	setMetalic(mchrome, 0.25, 0.9, 1, 0.6)
	mchrome.setTexture(tg.compose(1))
	mchrome.setTextureType('SphereEnv')
	mchrome.setTransparency(0.4)
	
	# geometries
	
	root = VR.getRoot().find('Headlight')
	
	VR.cardbox = VR.Geometry('cardbox')
	VR.cardbox.setPrimitive('Box 0 0 0 1')
	VR.cardbox.hide()
	
		
	
	#Erstelle Geometrie für Felge0. Einzelne Instanzen können hinterher mit VR.felge0.duplicate() geholt werden.
	u1 = VR.Geometry('u1')
	u2 = VR.Geometry('u2')
	u1.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	u2.setPrimitive('Box 0.12 0.1 0.2 1 1 1')
	u2.setFrom(0,0.05,0.02)
	VR.felge0 = VR.CSGGeometry('felge0')
	VR.felge0.addChild(u1)
	VR.felge0.addChild(u2)
	VR.felge0.setOperation('subtract')
	root.addChild(VR.felge0)
	VR.felge0.setEditMode(0)
	VR.felge0.setMaterial(mchrome)
	VR.felge0.setTexCoords(VR.felge0.getPositions())
	VR.felge0.hide()
	
	#Erstelle Geometrie für Felge1
	t1 = VR.Geometry('t1')
	t2 = VR.Geometry('t2')
	t1.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	t2.setPrimitive('Box 0.12 0.1 0.2 1 1 1')
	t2.setFrom(0,0.05,0.02)
	VR.felge1 = VR.CSGGeometry('felge1')
	VR.felge1.addChild(t1)
	VR.felge1.addChild(t2)
	VR.felge1.setOperation('subtract')
	root.addChild(VR.felge1)
	VR.felge1.setEditMode(0)
	VR.felge1.setMaterial(mchrome)
	VR.felge1.setTexCoords(VR.felge1.getPositions())
	VR.felge1.hide()
	
		
	VR.rohling = VR.Geometry('tt1')
	VR.rohling.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	root.addChild(VR.rohling)
	VR.rohling.setMaterial(mchrome)#Alisa sagt: Ja ich weiß dass das das gleiche ist. ist mir grade egal.
	VR.rohling.setTexCoords(VR.rohling.getPositions())
	VR.rohling.hide()
	
	
	
	VR.FRrohling = VR.loadGeometry('Rohling.dae',True).getChildren(True,"Geometry")[0]
	VR.FRrohling.setName("Rohling")
	
	#VR.FRrohling.setFrom([-7,2,4]) # bei fraese
	#root.addChild(VR.FRrohling)
	VR.FRrohling.hide()
	

	VR.FRfelge0 = VR.loadGeometry('Felge1.dae')
	VR.FRfelge1 = VR.loadGeometry('Felge2.dae')
	VR.FRrohling.setMaterial(VR.FRfelge0.getChildren(True,"Geometry")[0].getMaterial())
	
	root.addChild(VR.FRfelge0)
	root.addChild(VR.FRfelge1)
	VR.FRfelge0.hide()
	VR.FRfelge1.hide()

	
	
	
	
</core>
    </Script>
    <Script name_suffix="1" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	#laedt einige wichtige Geometrien, zB die Felgen. Muss als erstes.
	VR.initScene()
	#Initialisiert die Logistik. Braucht initScene, muss vor LogisticsControl und allen anderen.
	VR.LogisticsInit()
	#Laedt die Halle und Monitorgeometrie. Sollte vor anderen monitor-skripten sein.
	VR.Environment()
	#Sollte vor Roboter und Fraese kommen. Macht erstmal noch nichts.
	VR.LogisticsControl()
	#Am Ende
	VR.RobotControl()
	VR.triggerScript('FraeseControl')
	VR.triggerScript('monitorControlInit')
	VR.triggerScript('monitorStatusInit')

</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="mat_Chrome" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#if hasattr(VR, 'chrome'):
	#	return VR.chrome
	
	#http://devernay.free.fr/cours/opengl/materials.html
	
	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)	
	
	VR.chrome = VR.Material('Chrome')
	setMetalic(VR.chrome, 0.25, 0.4, 0.77, 0.6) #chrome
	#VR.chrome.setDiffuse([d,d,d])
	
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.6
	
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	VR.chrome.setTexture(tg.compose(0))
	#return VR.chrome
	
	VR.chrome.addPass()
	setMetalic(VR.chrome, 0.25, 0.9, 1, 0.6)
	VR.chrome.setTexture('metal5.jpg')
	VR.chrome.setTextureType('SphereEnv')
	VR.chrome.setTransparency(0.4)
	
	return VR.chrome
</core>
    </Script>
    <Script name_suffix="0" base_name="monitorControlControls" name_space="__script__" type="Python" mobile="">
      <core>
	import VR

	#Keys 1 and 2 are used for this script
	
	k = dev.getKey()
	#print k
	
	if(k == 1):
		msg = dev.getMessage()
		#print msg + " msg"
		split = msg.split("|")
		#print split
		rimCount = int(split[0])
		rimType = int(split[1])
		print "Control: Starte Auftrag für " + str(split[0]) + " Felgen Typ " + str(split[1])
		VR.auftragqueue.appendleft([rimCount,rimType])
		VR.monitorStatusController.updateProductionQueue()
	elif(k == 2):
		msg = dev.getMessage()
		split = msg.split("|")
		joint = int(split[0])
		degree = int(split[1])
		if(joint == 1):
			VR.robotController.move_a1(degree)	
		elif(joint == 2):
			VR.robotController.move_a2(degree)	
		elif(joint == 3):
			VR.robotController.move_a3(degree)	
		elif(joint == 4):
			VR.robotController.move_a4(degree)	
		elif(joint == 5):
			VR.robotController.move_a5(degree)				
		
	else:
		print "Unknown button pressed"
	
		
</core>
      <trig type="on_device" dev="mobile" state="Pressed" param="" key="2" name_suffix="13" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="mobile" state="Pressed" param="" key="1" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="monitorControlInit" name_space="__script__" type="Python" mobile="">
      <core>
	import VR	
	
	mat = VR.Material('gui')
	mat.setLit(False)
	geo = VR.Geometry('gui')
	#erste beiden zahlen: breite und höhe
	geo.setPrimitive('Plane 2.34 1.31625 1 1')
	geo.setMaterial(mat)
	geo.setPose([0,-0.1,1.1],[0,-1,0],[0,0,-1])
	VR.monitorControl.addChild(geo)
	
	cef = VR.CEF()
	cef.setMaterial(mat)
	cef.addMouse(mouse, geo, 0, 2, 3, 4)
	cef.addMouse(flystick, geo, 0, 2, 3, 4)
	cef.addKeyboard(keyboard)
	cef.setResolution(800)
	cef.setAspectRatio(16.0/9.0)
	cef.open('http://localhost:5500/monitorControlWebsite')
	
	VR.monitorControlWeb = cef
</core>
      <arg type="VRPyDeviceType" value="flystick" name_suffix="0" base_name="flystick" name_space="monitorControlInit"/>
      <arg type="VRPyDeviceType" value="keyboard" name_suffix="0" base_name="keyboard" name_space="monitorControlInit"/>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="mouse" name_space="monitorControlInit"/>
    </Script>
    <Script name_suffix="0" base_name="monitorControlWebsite" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html&gt;

&lt;head&gt;
&lt;style type="text/css"&gt;
body{ 
	background:#FFFFFF; 
}
h1{
	font-size: 7.0vh;
}
h2 {
	font-size: 2.5vw;
	color: #718DA5;
}
#header{
	background:#2A4F6E;   
	color: #718DA5;  
	font-size: 3.0vw; 
	height:8vh;
}
#content{ 
	color:#042037;
	font-size: 2.5vw;
	padding-bottom:2vw; 
}
#footer{
	background: #2A4F6E;
	color: #718DA5; 
	position:fixed;
	bottom:0vh;
	width:100%;
	height:7vh;
}
input{
	font-size: 2.5vw;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;script&gt;
	var type;
	var count;
	 
	function start() {
		var rimCount = document.getElementById('RimCount').value;
		
		var radios = document.getElementsByName('RimType');
		var rimType;
		// stupid but maybe we have more than one rimType one day
		for (var i = 0, length = radios.length; i &lt; length; i++) {
			if (radios[i].checked) {
				rimType = i;
				break;
			}
		}   
		var s = "" + rimCount + "|" + rimType;	   
		var uri = document.URL+'mobile?button=1'+'&amp;state=1'+'&amp;message='+s;
		
		var xmlHttp = new XMLHttpRequest();  
		xmlHttp.open( "GET", uri, true );
		xmlHttp.send( null );
	}
	
	function incrementRimCount()
	{
		var value = parseInt(document.getElementById('RimCount').value, 10);
		value = isNaN(value) ? 0 : value;
		value++;
		document.getElementById('RimCount').value = value;
	}
	function decrementRimCount()
	{
		var value = parseInt(document.getElementById('RimCount').value, 10);
		value = isNaN(value) ? 0 : value;
		// only values &gt;=1 allowed here
		if(value &lt;= 1){
			value = 1
		} else {
			value--;
		}
		document.getElementById('RimCount').value = value;
	}
	function moveRobot(joint, degree){
		var s = "" + joint + "|" + degree;	   
		var uri = document.URL+'mobile?button=2'+'&amp;state=1'+'&amp;message='+s;
		var xmlHttp = new XMLHttpRequest();  
		xmlHttp.open( "GET", uri, true );
		xmlHttp.send( null );
	}
&lt;/script&gt;
&lt;body&gt;

&lt;div id="header"&gt;
	&lt;center&gt;
		&lt;h1&gt;Control&lt;/h1&gt;
	&lt;/center&gt;
&lt;/div&gt;
&lt;div id="content"&gt;
    &lt;p&gt;
		&lt;center&gt;
		&lt;form&gt;
			Teilmenge:
			&lt;input type="text" id="RimCount" value="1"/&gt;
			&lt;input type="button" onclick="incrementRimCount()" value="More" /&gt;
			&lt;input type="button" onclick="decrementRimCount()" value="Less" /&gt;
			&lt;br /&gt;
			Felgentyp: 
			 &lt;input type="radio" id="r0" name="RimType" value="0" checked&gt;&lt;label for="mc"&gt; 1&lt;/label&gt; 
			 &lt;input type="radio" id="r1" name="RimType" value="1"&gt;&lt;label for="vi"&gt; 2&lt;/label&gt;&lt;br&gt; 
			 &lt;br /&gt;
			 &lt;input type="button" onclick="start()" value="Auftrag starten" /&gt;	 	 
		&lt;/form&gt;
		&lt;/center&gt;
	&lt;/p&gt;
	
	&lt;p&gt;
	&lt;center&gt;
		&lt;h2&gt; Manual Robot control &lt;/h2&gt;
		Joint 1:
		&lt;input type="button" onclick="moveRobot(1,10)" value="+" /&gt;
		&lt;input type="button" onclick="moveRobot(1,-10)" value="-" /&gt; &lt;br&gt;
		Joint 2:
		&lt;input type="button" onclick="moveRobot(2,10)" value="+" /&gt;
		&lt;input type="button" onclick="moveRobot(2,-10)" value="-" /&gt; &lt;br&gt;
		Joint 3:
		&lt;input type="button" onclick="moveRobot(3,10)" value="+" /&gt;
		&lt;input type="button" onclick="moveRobot(3,-10)" value="-" /&gt; &lt;br&gt;
		Joint 4:
		&lt;input type="button" onclick="moveRobot(4,10)" value="+" /&gt;
		&lt;input type="button" onclick="moveRobot(4,-10)" value="-" /&gt; &lt;br&gt;
		Joint 5:
		&lt;input type="button" onclick="moveRobot(5,10)" value="+" /&gt;
		&lt;input type="button" onclick="moveRobot(5,-10)" value="-" /&gt; &lt;br&gt;
	&lt;/center&gt;	
	&lt;/p&gt;
	
&lt;/div&gt;
&lt;div id="footer"&gt;
	&lt;center&gt;
	-
	&lt;/center&gt;
&lt;/div&gt;


&lt;/body&gt;

&lt;/html&gt;

</core>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusControls" name_space="__script__" type="Python" mobile="">
      <core>
	# Handles all information used for status in a json Object
	# this object is then pushed to the currently viewed homepage 
	# via url
	# all scripts can call updates and then updateHomepage() 
	# refreshes the homepage
	# If it is not called manually the refresh is done by the Status updater
	
	import VR
	import math
	import json
	
	class monitorStatusController:
		def __init__(self):
			print "initialisiere monitorStatusController"
			# Data as json object 
			self.StatusData = {
				'CurrentJob': '',
				'LagerCapacity': 0,
				'LagerStand': 0,
				'FertigCapacity': 0,
				'FertigStand': 0,
				'BufferCapacity': 0,
				'BufferStand': 0,
				'FraeseStatus': 'Steht still',
				'RoboterStatus': 'Steht in Startposition',
				'ProductionQueue': ''
				}
			
			self.updateHomepage()
			
		# Send data object to Homepage
		# used for refresh
		# can be called from all scripts and gets called 
		# periodicaly by the statusUpdate script
		def updateHomepage(self):	
			jsondata = json.dumps(self.StatusData)
			jsondataasbytes = jsondata.encode('utf-8')
			url = VR.currentStatusURL + "?data=" + jsondataasbytes
			#print url
			VR.monitorStatusWeb.open(url)
			
			
		def updateProductionQueue(self):
			self.StatusData["ProductionQueue"] = list(VR.auftragqueue)
			self.updateHomepage()
			#print self.StatusData["ProductionQueue"]
				
		# Setters for the JSON data	
		def setFraeseStatus(self, status):
			self.StatusData["FraeseStatus"] = status		
			
		def setRoboterStatus(self, status):
			self.StatusData["RoboterStatus"] = status		
			
		def setLagerCapacity(self, amount):
			self.StatusData["LagerCapacity"] = amount
			
		def setCurrentJob(self, job):
			self.StatusData["CurrentJob"] = job
			
		def setLagerStand(self, amount):
			self.StatusData["LagerStand"] = amount

		def setFertigCapacity(self, amount):
			self.StatusData["FertigCapacity"] = amount
			
		def setFertigStand(self, amount):
			self.StatusData["FertigStand"] = amount

		def setBufferCapacity(self, amount):
			self.StatusData["BufferCapacity"] = amount
			
		def setBufferStand(self, amount):
			self.StatusData["BufferStand"] = amount			
			
		#getters
		def getLagerStand(self):
			return self.StatusData["LagerStand"]
			
		def getLagerCapacity(self):
			return self.StatusData["LagerCapacity"]
		
		def getFertigStand(self):
			return self.StatusData["FertigStand"]
			
		def getFertigCapacity(self):
			return self.StatusData["FertigCapacity"]			
		
		def getBufferStand(self):
			return self.StatusData["BufferStand"]
			
		def getBufferCapacity(self):
			return self.StatusData["BufferCapacity"]		
		
		def destroy(self):
			return
		
	if hasattr(VR, 'monitorStatusController') and VR.monitorStatusController is not None:
		VR.monitorStatusController.destroy()
	VR.monitorStatusController = monitorStatusController()	

	
</core>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusInit" name_space="__script__" type="Python" mobile="">
      <core>
	import VR	
	VR.currentStatusURL = 'http://localhost:5500/monitorStatusWebsiteOverview'
	
	mat = VR.Material('gui')
	mat.setLit(False)
	geo = VR.Geometry('gui')
	#erste beiden zahlen: breite und höhe
	geo.setPrimitive('Plane 2.34 1.31625 1 1')
	geo.setMaterial(mat)
	geo.setPose([0,-0.1,1.1],[0,-1,0],[0,0,-1])
	VR.monitorStatus.addChild(geo)
	
	cef = VR.CEF()
	cef.setMaterial(mat)
	cef.addMouse(mouse, geo, 0, 2, 3, 4)
	cef.addMouse(flystick, geo, 0, 2, 3, 4)
	cef.addKeyboard(keyboard)
	cef.setResolution(800)
	cef.setAspectRatio(16.0/9.0)
	cef.open(VR.currentStatusURL)
		
	VR.monitorStatusWeb = cef
	VR.monitorStatusControls()
	
		
		
</core>
      <arg type="VRPyDeviceType" value="flystick" name_suffix="0" base_name="flystick" name_space="monitorStatusInit"/>
      <arg type="VRPyDeviceType" value="keyboard" name_suffix="0" base_name="keyboard" name_space="monitorStatusInit"/>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="mouse" name_space="monitorStatusInit"/>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusSwitcher" name_space="__script__" type="Python" mobile="">
      <core>
	# This is used to switch between the different status displays
	# since all job information is pushed via URL it is needed to support
	# different urls and continouus updates out of python scripts

	import VR
	
	k = dev.getKey()
	msg = dev.getMessage()
	#print "switch to " + msg

	# key 5 is used for this script
	if k == 5:
		if msg == 'auftrag':
			VR.currentStatusURL = 'http://localhost:5500/monitorStatusWebsiteAuftrag'
		elif msg == 'overview':
			VR.currentStatusURL = 'http://localhost:5500/monitorStatusWebsiteOverview'
		elif msg == 'fraese':
			VR.currentStatusURL = 'http://localhost:5500/monitorStatusWebsiteFraese'
		elif msg == 'roboter':
			VR.currentStatusURL = 'http://localhost:5500/monitorStatusWebsiteRoboter'
	else: 
		print "Something unexpected happened with key 5"
		
	VR.monitorStatusController.updateHomepage()
	
</core>
      <trig type="on_device" dev="mobile" state="Pressed" param="" key="5" name_suffix="14" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusUpdater" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	if not hasattr(VR, 'monitorStatusController'):
		return
	
	# Updates changing values from the logistic simulation boxes and refreshes
	# the status homepage afterwards

	# Lade Boxinhalte
	# Aktualisiere Lager
	currentLagerCapacity = VR.containers[0].getCapacity()	
	currentLagerStand = VR.containers[0].getCount()
	
	# Aktualisiere Buffer
	currentBufferCapacity = VR.containers[1].getCapacity()
	currentBufferStand = VR.containers[1].getCount()
	
	# Aktualisiere Fertig
	currentFertigCapacity = VR.containers[3].getCapacity()
	currentFertigStand = VR.containers[3].getCount()
	
	
	# Update Homepage only if change occured
	# workaround due to no calls possible from logistic to python
	if(VR.monitorStatusController.getLagerCapacity() != currentLagerCapacity):
		VR.monitorStatusController.setLagerCapacity(currentLagerCapacity)
		VR.monitorStatusController.updateHomepage()		
	
	if(VR.monitorStatusController.getLagerStand() != currentLagerStand):
		VR.monitorStatusController.setLagerStand(currentLagerStand)
	VR.monitorStatusController.updateHomepage()
		
	if(VR.monitorStatusController.getBufferCapacity() != currentBufferCapacity):
		VR.monitorStatusController.setBufferCapacity(currentBufferCapacity)	
		VR.monitorStatusController.updateHomepage()
		
	if(VR.monitorStatusController.getBufferStand() != currentBufferStand):
		VR.monitorStatusController.setBufferStand(currentBufferStand)
		VR.monitorStatusController.updateHomepage()
		
	if(VR.monitorStatusController.getFertigCapacity() != currentFertigCapacity):
		VR.monitorStatusController.setFertigCapacity(currentFertigCapacity)	
		VR.monitorStatusController.updateHomepage()
		
	if(VR.monitorStatusController.getFertigStand() != currentFertigStand):
		VR.monitorStatusController.setFertigStand(currentFertigStand)
		VR.monitorStatusController.updateHomepage()
		
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="100" key="0" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusWebsiteAuftrag" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html&gt;

&lt;head&gt;
&lt;style type="text/css"&gt;
body{
  background:#FFFFFF; 
  
}
#header{
  background:#2A4F6E;   
  color: #718DA5;  
  font-size: 100%; 
  height:8vh;
}
input[type=button] {
    width: 13vw;  height: 6vh;;
}
h1{
	font-size:7vh;
}
h2{
	font-size:5vh;
}
#content{ 
	color:#042037;
	font-size: 2.5vw;
	padding-bottom:2vw;
}
#footer{
  background: #2A4F6E;
  color: #718DA5; 
  position:fixed;
	bottom:0vh;
  width:100%;
	height:7vh;
	padding-top: 0.5vh;
}
#progress{
	float: left;
	width: 45vw;
	height: 40vh;
	
}
#fraeseStatus{
	float:right;
	width: 45vw;
	height: 40vh;
}
#roboterStatus{
	float:left;
	width: 45vw;
	height: 40vh;
}
#auftragspipeline{
	float:right;
	width: 45vw;
	height: 40vh;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;script&gt;
// kudos to stack overflow
function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split('&amp;');
    for (var i = 0; i &lt; vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    console.log('Query variable %s not found', variable);
}

json = getQueryVariable("data")
data = JSON.parse(json)
&lt;/script&gt;
&lt;body&gt;

&lt;div id="header"&gt;
	&lt;center&gt;
		&lt;h1&gt;Auftragsstatus&lt;/h1&gt;
	&lt;/center&gt;
&lt;/div&gt;
&lt;div id="content"&gt;
		&lt;div id="progress"&gt;
			&lt;center&gt;
			&lt;h2&gt;Aktueller Auftrag:&lt;/h2&gt;
			&lt;div id="currentProduction"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("currentProduction");
				var menge = 0;
				var typ = 0;
				if(data.CurrentJob.length == 0){
					menge = 0;
					type = 0;
				} else {
						menge = data.CurrentJob[0];
						typ = data.CurrentJob[1];
				}
				div.textContent = "Menge: " + menge + " Typ: " + typ;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;br&gt;
			&lt;div id="fertig"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("fertig");
				div.textContent = "Fertig: " + data.FertigStand + "/" + data.FertigCapacity;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;div id="lager"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("lager");
				div.textContent = "Lagerstand: " + data.LagerStand + "/" + data.LagerCapacity;
				var text = div.textContent;
			&lt;/script&gt;	
			&lt;div id="buffer"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("buffer");
				div.textContent = "Pufferbox: " + data.BufferStand + "/" + data.BufferCapacity;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
		&lt;div id="auftragspipeline"&gt;
			&lt;center&gt;
				&lt;h2&gt;Auftragspipeline&lt;/h2&gt;
				&lt;div id="productionQueue"&gt;&lt;/div&gt;
				&lt;script type="text/javascript"&gt;
					var div = document.getElementById("productionQueue");
					var s = "";
					if(data.ProductionQueue.length == 0) {
						s = "leer";
					} else {
						// Queue wird als Liste geschickt in JSON
						// Naechstes Element steht ganz rechts
						for (var i = data.ProductionQueue.length - 1; i &gt;= 0 ; i--) { 
							s = s + "[Menge:" + data.ProductionQueue[i][0] + ", Typ:" + data.ProductionQueue[i][1] + "] \n";						
						}
					}
					div.innerText = " " + s;			
				&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
		
		


		

&lt;/div&gt;
&lt;script&gt;
	// changePage uses key 5 to call monitorStatusSwitcher method
	function changePage(target){	   
		var uri = 'http://localhost:5500/mobile?button=5'+'&amp;state=1'+'&amp;message='+target;
		var xmlHttp = new XMLHttpRequest();  
		xmlHttp.open( "GET", uri, true );
		xmlHttp.send( null );
	}
&lt;/script&gt;
&lt;div id="footer"&gt;
	&lt;center&gt;
		&lt;!-- Hier müssen die korrekten Namen übergeben werden, 
		die im Switcher abgefragt werden --&gt;
		&lt;input type="button" onclick="changePage('overview')" value="Ueberblick" /&gt;
		&lt;input type="button" onclick="changePage('auftrag')" value="Auftrag" /&gt;
		&lt;input type="button" onclick="changePage('fraese')" value="Fraese" /&gt;
		&lt;input type="button" onclick="changePage('roboter')" value="Roboter" /&gt;
	&lt;/center&gt;
&lt;/div&gt;


&lt;/body&gt;

&lt;/html&gt;

</core>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusWebsiteFraese" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html&gt;

&lt;head&gt;
&lt;style type="text/css"&gt;
body{
  background:#FFFFFF; 
  
}
#header{
  background:#2A4F6E;   
  color: #718DA5;  
  font-size: 100%; 
  height:8vh;
}
input[type=button] {
    width: 13vw;  height: 6vh;;
}
h1{
	font-size:7vh;
}
h2{
	font-size:5vh;
}
#content{ 
	color:#042037;
	font-size: 2.5vw;
	padding-bottom:2vw;
}
#footer{
  background: #2A4F6E;
  color: #718DA5; 
  position:fixed;
	bottom:0vh;
  width:100%;
	height:7vh;
	padding-top: 0.5vh;
}
#fraeseStatus{
	float:left;
	width: 95vw;
	height: 40vh;
}

&lt;/style&gt;
&lt;/head&gt;
&lt;script&gt;
// kudos to stack overflow
function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split('&amp;');
    for (var i = 0; i &lt; vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    console.log('Query variable %s not found', variable);
}

json = getQueryVariable("data")
data = JSON.parse(json)
&lt;/script&gt;
&lt;body&gt;

&lt;div id="header"&gt;
	&lt;center&gt;
		&lt;h1&gt;Fraesenstatus&lt;/h1&gt;
	&lt;/center&gt;
&lt;/div&gt;
&lt;div id="content"&gt;
		&lt;div id="fraeseStatus"&gt;
			&lt;center&gt;
			&lt;h2&gt;Zustand&lt;/h2&gt;
			&lt;div id="fraeseStatusText"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("fraeseStatusText");
				div.textContent = "" + data.FraeseStatus;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;h2&gt;Kontrollwerte&lt;/h2&gt;
			-- Hier koennten Kontrollwerte wie &lt;br&gt;
			Temperatur, Fehlercodes, Wartungsmeldungen &lt;br&gt;
			ausgegeben werden --
			&lt;/center&gt;
		&lt;/div&gt;

		
		


		

&lt;/div&gt;
&lt;script&gt;
	// changePage uses key 5 to call monitorStatusSwitcher method
	function changePage(target){	   
		var uri = 'http://localhost:5500/mobile?button=5'+'&amp;state=1'+'&amp;message='+target;
		var xmlHttp = new XMLHttpRequest();  
		xmlHttp.open( "GET", uri, true );
		xmlHttp.send( null );
	}
&lt;/script&gt;
&lt;div id="footer"&gt;
	&lt;center&gt;
		&lt;!-- Hier müssen die korrekten Namen übergeben werden, 
		die im Switcher abgefragt werden --&gt;
		&lt;input type="button" onclick="changePage('overview')" value="Ueberblick" /&gt;
		&lt;input type="button" onclick="changePage('auftrag')" value="Auftrag" /&gt;
		&lt;input type="button" onclick="changePage('fraese')" value="Fraese" /&gt;
		&lt;input type="button" onclick="changePage('roboter')" value="Roboter" /&gt;
	&lt;/center&gt;
&lt;/div&gt;


&lt;/body&gt;

&lt;/html&gt;

</core>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusWebsiteOverview" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html&gt;

&lt;head&gt;
&lt;style type="text/css"&gt;
body{
  background:#FFFFFF; 
  
}
#header{
  background:#2A4F6E;   
  color: #718DA5;  
  font-size: 100%; 
  height:8vh;
}
input[type=button] {
    width: 13vw;  height: 6vh;;
}
h1{
	font-size:7vh;
}
#content{ 
	color:#042037;
	font-size: 2.5vw;
	padding-bottom:2vw;
}
#footer{
  background: #2A4F6E;
  color: #718DA5; 
  position:fixed;
	bottom:0vh;
  width:100%;
	height:7vh;
	padding-top: 0.5vh;
}
#progress{
	float: left;
	width: 45vw;
	height: 40vh;
	
}
#fraeseStatus{
	float:right;
	width: 45vw;
	height: 40vh;
}
#roboterStatus{
	float:left;
	width: 45vw;
	height: 40vh;
}
#auftragspipeline{
	float:right;
	width: 45vw;
	height: 40vh;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;script&gt;
// kudos to stack overflow
function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split('&amp;');
    for (var i = 0; i &lt; vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    console.log('Query variable %s not found', variable);
}

json = getQueryVariable("data")
data = JSON.parse(json)
&lt;/script&gt;
&lt;body&gt;

&lt;div id="header"&gt;
	&lt;center&gt;
		&lt;h1&gt;Status&lt;/h1&gt;
	&lt;/center&gt;
&lt;/div&gt;
&lt;div id="content"&gt;
		&lt;div id="progress"&gt;
			&lt;center&gt;
			&lt;i&gt;Aktueller Auftrag:&lt;/i&gt;&lt;br&gt;
			&lt;div id="currentProduction"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("currentProduction");
				var menge = 0;
				var typ = 0;
				if(data.CurrentJob.length == 0){
					menge = 0;
					type = 0;
				} else {
						menge = data.CurrentJob[0];
						typ = data.CurrentJob[1];
				}
				div.textContent = "Menge: " + menge + " Typ: " + typ;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;br&gt;
			&lt;div id="fertig"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("fertig");
				div.textContent = "Fertig: " + data.FertigStand + "/" + data.FertigCapacity;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;div id="lager"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("lager");
				div.textContent = "Lagerstand: " + data.LagerStand + "/" + data.LagerCapacity;
				var text = div.textContent;
			&lt;/script&gt;	
			&lt;div id="buffer"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("buffer");
				div.textContent = "Pufferbox: " + data.BufferStand + "/" + data.BufferCapacity;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
		&lt;div id="fraeseStatus"&gt;
			&lt;center&gt;
			&lt;i&gt;Fraesenstatus:&lt;/i&gt; &lt;br&gt;
			&lt;div id="fraeseStatusText"&gt;&lt;/div&gt;
			&lt;script type="text/javascript"&gt;
				var div = document.getElementById("fraeseStatusText");
				div.textContent = "Fraese: " + data.FraeseStatus;
				var text = div.textContent;
			&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
		&lt;div id="roboterStatus"&gt;
			&lt;center&gt;
				&lt;i&gt;Roboter&lt;/i&gt; &lt;br&gt;
				&lt;div id="roboterStatusText"&gt;&lt;/div&gt;
				&lt;script type="text/javascript"&gt;
				var div = document.getElementById("roboterStatusText");
				div.textContent = "" + data.RoboterStatus;
				var text = div.textContent;
				&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
		&lt;div id="auftragspipeline"&gt;
			&lt;center&gt;
				&lt;i&gt;Auftragspipeline&lt;/i&gt; &lt;br&gt;
				&lt;div id="productionQueue"&gt;&lt;/div&gt;
				&lt;script type="text/javascript"&gt;
					var div = document.getElementById("productionQueue");
					var s = "";
					if(data.ProductionQueue.length == 0) {
						s = "leer";
					} else {
						// Queue wird als Liste geschickt in JSON
						// Naechstes Element steht ganz rechts
						var reversedQueue = data.ProductionQueue.reverse();
						var len = 0
						if (reversedQueue.length &lt;= 6){
							len = reversedQueue.length
						} else {
							len = 6
						}
						for (var i = 0; i &lt; len ; i++) { 
							s = s + "[Menge:" + data.ProductionQueue[i][0] + ", Typ:" + data.ProductionQueue[i][1] + "] \n";						
						}
					}
					div.innerText = " " + s;			
				&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
		
		


		

&lt;/div&gt;
&lt;script&gt;
	// changePage uses key 5 to call monitorStatusSwitcher method
	function changePage(target){	   
		var uri = 'http://localhost:5500/mobile?button=5'+'&amp;state=1'+'&amp;message='+target;
		var xmlHttp = new XMLHttpRequest();  
		xmlHttp.open( "GET", uri, true );
		xmlHttp.send( null );
	}
&lt;/script&gt;
&lt;div id="footer"&gt;
	&lt;center&gt;
		&lt;!-- Hier müssen die korrekten Namen übergeben werden, 
		die im Switcher abgefragt werden --&gt;
		&lt;input type="button" onclick="changePage('overview')" value="Ueberblick" /&gt;
		&lt;input type="button" onclick="changePage('auftrag')" value="Auftrag" /&gt;
		&lt;input type="button" onclick="changePage('fraese')" value="Fraese" /&gt;
		&lt;input type="button" onclick="changePage('roboter')" value="Roboter" /&gt;
	&lt;/center&gt;
&lt;/div&gt;


&lt;/body&gt;

&lt;/html&gt;

</core>
    </Script>
    <Script name_suffix="0" base_name="monitorStatusWebsiteRoboter" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html&gt;

&lt;head&gt;
&lt;style type="text/css"&gt;
body{
  background:#FFFFFF; 
  
}
#header{
  background:#2A4F6E;   
  color: #718DA5;  
  font-size: 100%; 
  height:8vh;
}
input[type=button] {
    width: 13vw;  height: 6vh;;
}
h1{
	font-size:7vh;
}
h2{
	font-size:5vh;
}
#content{ 
	color:#042037;
	font-size: 2.5vw;
	padding-bottom:2vw;
}
#footer{
  background: #2A4F6E;
  color: #718DA5; 
  position:fixed;
	bottom:0vh;
  width:100%;
	height:7vh;
	padding-top: 0.5vh;
}
#roboterStatus{
	float:left;
	width: 95vw;
	height: 40vh;
}

&lt;/style&gt;
&lt;/head&gt;
&lt;script&gt;
// kudos to stack overflow
function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split('&amp;');
    for (var i = 0; i &lt; vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    console.log('Query variable %s not found', variable);
}

json = getQueryVariable("data")
data = JSON.parse(json)
&lt;/script&gt;
&lt;body&gt;

&lt;div id="header"&gt;
	&lt;center&gt;
		&lt;h1&gt;Roboterstatus&lt;/h1&gt;
	&lt;/center&gt;
&lt;/div&gt;
&lt;div id="content"&gt;
		
		&lt;div id="roboterStatus"&gt;
			&lt;center&gt;
				&lt;h2&gt;Roboter&lt;/h2&gt; 
				&lt;div id="roboterStatusText"&gt;&lt;/div&gt;
				&lt;script type="text/javascript"&gt;
				var div = document.getElementById("roboterStatusText");
				div.textContent = "" + data.RoboterStatus;
				var text = div.textContent;
				&lt;/script&gt;
			&lt;/center&gt;
		&lt;/div&gt;
			

&lt;/div&gt;
&lt;script&gt;
	// changePage uses key 5 to call monitorStatusSwitcher method
	function changePage(target){	   
		var uri = 'http://localhost:5500/mobile?button=5'+'&amp;state=1'+'&amp;message='+target;
		var xmlHttp = new XMLHttpRequest();  
		xmlHttp.open( "GET", uri, true );
		xmlHttp.send( null );
	}
&lt;/script&gt;
&lt;div id="footer"&gt;
	&lt;center&gt;
		&lt;!-- Hier müssen die korrekten Namen übergeben werden, 
		die im Switcher abgefragt werden --&gt;
		&lt;input type="button" onclick="changePage('overview')" value="Ueberblick" /&gt;
		&lt;input type="button" onclick="changePage('auftrag')" value="Auftrag" /&gt;
		&lt;input type="button" onclick="changePage('fraese')" value="Fraese" /&gt;
		&lt;input type="button" onclick="changePage('roboter')" value="Roboter" /&gt;
	&lt;/center&gt;
&lt;/div&gt;


&lt;/body&gt;

&lt;/html&gt;

</core>
    </Script>
    <Script name_suffix="0" base_name="robotTeachIn" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#auskommentieren für Roboter Maussteuerung
	return
	i = dev.getIntersected()
	
	if i.getName() in ['Greifer_haupt', 'Cube.2', 'Cube.5']:
		VR.robotController.greifen()
		return
		
	
	#Roboter an den geklickten Punkt schicken
	p = dev.getIntersection()
	VR.robotController.goTo(p, None)
	
	return 
	def movePath(path):
		self.path = path
		
	def onNext():
		if len(self.path) &gt; 0:
			goto(path[0])
			del path[0]
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" name_suffix="5" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>

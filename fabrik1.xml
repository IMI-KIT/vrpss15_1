<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="Logistics" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="-3.39237 5.41267 -4.81817" at="-1.54208 4.00176 3.82889" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="Auftrag" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if (anzahl &lt; 1):
		print "Kann keinen Auftrag für &lt;1 Felgen starten. Abbruch."
		return
	
	if hasattr(VR,'containers'):
		if(VR.containers[0].isEmpty()):
			print "Starte Auftrag für " + str(anzahl) + " Felgen Typ " + str(modell)
			VR.auftragFertig = False # Ja ich weiß dass das noch woanders gemacht wird. sicher ist sicher.
			VR.containers[0].setCapacity(anzahl)
			VR.containers[3].clear()
			VR.containers[3].setCapacity(anzahl)
			VR.log.fillContainer(VR.containers[0],anzahl,VR.rohling)
		else:
			print "Container0 (Lager) ist noch nicht leer! Starte Auftrag nicht."
		
	
	else:
		print "Achtung! Container noch nicht initialisiert!"
</core>
      <arg type="int" value="50" name_suffix="0" base_name="anzahl" name_space="Auftrag"/>
      <arg type="int" value="0" name_suffix="0" base_name="modell" name_space="Auftrag"/>
    </Script>
    <Script name_suffix="0" base_name="AuftragWarteschlange" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import Queue
	if not hasattr(VR,'auftragqueue'):
		VR.auftragqueue = Queue.Queue() # Enthält Aufträge in der Form [Anzahl,Modell]
	if not hasattr(VR, 'auftragFertig'):
		VR.auftragFertig = True
	
	if (VR.auftragFertig and (not VR.auftragqueue.empty())):
		print "TODO starte auftrag."
		VR.auftragFertig = False
		auftragtupel = VR.auftragqueue.get()
		VR.Auftrag(auftragtupel[0],auftragtupel[1])
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="100" key="0" name_suffix="9" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="Environment" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math

	if hasattr(VR, 'halle'):
		VR.halle.destroy()
	VR.halle = VR.loadGeometry('halle.dae', True)
	light = VR.getRoot().find('Headlight')
	light.addChild(VR.halle)
	VR.halle.translate(2,1,20)
	VR.halle.rotate(0,-1,0, -0.5 * math.pi)
	#VR.halle.setScale(0.3,0.3,0.3)
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="21" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="FraeseControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	Pi = math.pi
	debugDoor = True
	debugdraw = True
	
	_animationTime = 50
	_animationOffset = 0
	
	class FraeseController:
		def __init__(self,r):
			print "initialisiere Fraesenklasse"
			VR.fraese_ablegepunkt = [0.325,0.37,0.07]
			#VR.fraese_scale = 0.06
			VR.fraese_scale = 0.095
			#load Geometry
			self.Base = VR.loadGeometry('Base.dae')
			self.LeftDoor = VR.loadGeometry('TrLinks.dae')
			self.RightDoor = VR.loadGeometry('TrRechts.dae')
			self.Arm1 = VR.loadGeometry('Arm1.dae')
			self.Arm2 = VR.loadGeometry('Arm2.dae')
			self.Motor = VR.loadGeometry('Motor.dae')
			
			self.Base.addChild(self.LeftDoor)
			self.Base.addChild(self.RightDoor)
			self.Base.addChild(self.Arm1)
			self.Base.addChild(self.Arm2)
			self.Base.addChild(self.Motor)
			
			scale = 3
			self.Base.setPose([-7,1.3,3],[0,1,0],[-1,0,0])
			self.Base.setScale(scale,scale,scale)
			#self.Base.setFrom(VR.fraese_ablegepunkt)
			r.addChild(self.Base)
			
			
			
			#Door close (invert will nicht)
			self.p1c = VR.Path()
			self.p1c.set([0.34,0,0], [0,0,-1], [0,1,0],[0,0,0], [0,0,-1], [0,1,0], 2)
			self.p2c = VR.Path()
			self.p2c.set([-0.14,0,0], [0,0,-1], [0,1,0],[0.205,0,0], [0,0,-1], [0,1,0], 2)
			#Door open
			self.p1o = VR.Path()
			self.p1o.set([0,0,0], [0,0,-1], [0.34,0,0], [0,0,-1], 2)
			self.p2o = VR.Path()
			self.p2o.set([0.205,0,0], [0,0,-1], [-0.14,0,0], [0,0,-1], 2) 
	
			self.doorOpen = True
			self.LeftDoor.setFrom([0.34, 0, 0])
			self.RightDoor.setFrom([-0.14, 0, 0])
			
		def startFraese(self,rohling,modell):
			print "Starte Fräsvorgang"
			#rohling positionieren
			rohling.rotate(1,0,0, -Pi)
			rohling.setScale(VR.fraese_scale,VR.fraese_scale,VR.fraese_scale)
			rohling.setFrom(VR.fraese_ablegepunkt)
			self.Base.addChild(rohling)
			self.rohling = rohling
			
			#fräsen
			self.useDoor()
			if modell == 0:
				self.nextGCode(VR.ParseGCode("NewModell1.nc"))
			else:
				self.nextGCode(VR.ParseGCode("NewModell2.nc")) #noch nicht da

		def nextGCode(self,parser):
			if parser.hasNext():
				print "next Gcode"
				#parsen
				paths = parser.ParseLine()
				if paths is  None:
					print "Error paths empty"
					self.nextGCode(parser)
					return
					
				#returns [p1, p2, p3, pd, loch (None oder True), Zeit]
				#animieren
				self.Motor.animate(paths[0], paths[5], 0, False)
				self.Arm2.animate(paths[1], paths[5], 0, False)
				self.Arm1.animate(paths[2], paths[5], 0, False)
				#debugdraw
				if debugdraw:
					s = VR.Stroke('path')
			
					s.addPath(paths[3])
					b=0.005
					prof = []
					prof.append([-b,0,b])
					prof.append([-b,0,-b])
					prof.append([b,0,-b])
					prof.append([b,0,b])
					s.strokeProfile(prof, True, True)
					self.Base.addChild(s)
				#abtrag
				if paths[4]:
					print "Abtrag"
				#rekursiver Aufruf
				VR.stackCall( self.nextGCode, paths[5] , [parser] )
	
			else:
				self.stop(0,)


		def stop(self,modell):#fertig - callback an Logistik
			#tür auf
			self.useDoor()
			#Felge erzeugen
			if modell == 0:
				objekt = VR.felge0.duplicate()
			else :
				objekt = VR.felge1.duplicate()
				
			objekt.rotate(1,0,0, -Pi)
			objekt.setScale(VR.fraese_scale,VR.fraese_scale,VR.fraese_scale)
			objekt.setFrom(VR.fraese_ablegepunkt)
			self.rohling.destroy()
			self.Base.addChild(objekt)
			
			#objekt = VR.log.addProduct(felge)
			#print objekt
			#objekt = felge
			print "Fraesevorgang done, call back Logistik"
			VR.logisticController.fraeseDone(objekt)
					
		def useDoor(self):
			if self.doorOpen and not debugDoor:	
				self.LeftDoor.animate(self.p1c, 1, 0, True)
				self.RightDoor.animate(self.p2c, 1, 0, True)
			else:
				self.LeftDoor.animate(self.p1o, 1, 0, True)
				self.RightDoor.animate(self.p2o, 1, 0, True)
			self.doorOpen = not self.doorOpen
			
		
	if not hasattr(VR, 'fraeseController'):
		VR.fraeseController = FraeseController(root)	

</core>
      <arg type="VRPyGeometryType" value="Headlight" name_suffix="0" base_name="root" name_space="FraeseControl"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="8" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="LogisticsControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#Pseudo-Enums für Zustände, da ich nicht weiß, wie man das in Python anständig macht
	VR.states_WaitForRohling = 0
	VR.states_MoveRohlingToFraese = 1
	VR.states_RohlingInFraese = 2
	VR.states_MoveFelgeToBand = 3
	VR.currentState = VR.states_WaitForRohling
	
	#objekt: Sollte mindestens vom Typ Geometry sein, damit wir die Position abfragen können.
	
	
	class LogisticController:
		def __init__(self):
			print "initialisiere LogisticController"
		
		def moveDone(self,objekt):
			print "moveDone called, state: " + str(VR.currentState)
			if (VR.currentState == VR.states_MoveRohlingToFraese):
				VR.currentState = VR.states_RohlingInFraese
				modell = 0
				VR.fraeseController.startFraese(objekt,modell)
			elif (VR.currentState == VR.states_MoveFelgeToBand):
				VR.currentState = VR.states_WaitForRohling
				# Achtung, nicht direkt wieder roboter rohling aufnehmen lassen,
				# Ich hab hier sonst etwas Angst vor Endlosrekursion! Gehe lieber erstmal in Zustand Warten,
				# Klasse mit regelmäßigem Update reagiert darauf.
				print "Felge done. Place on band."
				product = VR.log.addProduct(objekt)
				VR.containers[2].add(product)
			else:
				print "Achtung! moveDone called, aber Zustand passt nicht!"
				
						
		def fraeseDone(self,objekt):
			objekt.show()
			print "fraeseDone called"
			if (VR.currentState == VR.states_RohlingInFraese):
				VR.currentState = VR.states_MoveFelgeToBand
				startpunkt = VR.fraese_ablegepunkt
				endpunkt = VR.pfad2_startpunkt
				startrichtung = [-1,0,0]#TODO das ist grade nur waagrecht rein. Vllt muss das noch bisschen von Oben oder so.
				endrichtung = [0,1,0]
				VR.robotController.move(startpunkt,startrichtung,endpunkt,endrichtung,objekt)
			else:
				print "Achtung! Fraese fertig, aber Zustand passt nicht!"
				
		def start(self,product):
			print "Starte neuen Beweg-und-Fräs-Vorgang"
			VR.currentState =  VR.states_MoveRohlingToFraese
			startpunkt = VR.pfad1_endpunkt
			endpunkt = VR.fraese_ablegepunkt
			startrichtung = [0,0,-1]
			endrichtung = [1,0,0]
			geo = product.getGeometry()
			VR.robotController.move(startpunkt,startrichtung,endpunkt,endrichtung,geo)
			

		
		
	VR.logisticController = LogisticController()
		
		

</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="5" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="LogisticsInit" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	r = VR.getRoot().find('Headlight')

	
	# ------------ paths -----------------

	#Pfade: (a,1,1) zu (b,1,1): Fließband zu erster box
	# (b,1,1) zu (b,1,c): erste Box zu zweiter Box (kein Fließband, nur zum Produktflussmodellieren
	# (b,1,c) zu (d,1,c): Fließband ins Lager.
	# Ist grade am Einfachsten, die Fließbänder erstmal geradeaus parallel zur x-Achse laufen zu lassen.
	
	p0_length = 10 #Muss mindestens 3 sein, Beeinflusst den Abstand der Produkte auf dem Band. Bei nur 2 Punkten (Start und Ende) spinnt der Container.
	p2_length = 10 #Muss mindestens 3 sein, Beeinflusst den Abstand der Produkte auf dem Band. Bei nur 2 Punkten (Start und Ende) spinnt der Container.

	speed0 = 3.8 # Geschwindigkeit erstes Fließband
	speed2 = 0.8 # Geschwindigkeit zweites Fließband

	p0_startx = 8.0
	p0_endx = -4.0

	p2_startx = -4.0
	p2_endx = 8.0
	
	p_y = 1
	p0_z = 1
	p2_z = 7
	
	
	VR.pfad2_startpunkt = [p2_startx,p_y,p2_z]
	VR.fraese_ablegepunkt = [-8.0,3,3.5]
	VR.pfad1_endpunkt = [p0_endx,p_y,p0_z]



	if not hasattr(VR, 'ptool'): 
		VR.ptool = VR.Pathtool()	
		VR.paths = [p0_length,p2_length] # min 2
		for i,N in enumerate(VR.paths):
			VR.paths[i] = VR.ptool.newPath(None, r)
			for j in range(N-2):
				VR.ptool.extrude(None, VR.paths[i])
			
	# Pfad vom Lager zur ersten Kiste
	handles = VR.ptool.getHandles(VR.paths[0])
	p0_geolength = p0_endx - p0_startx
	for x in range (0,p0_length):		# Verteile gleichmäßig Stationen auf dem Fließband. Falls die unregelmäßig sind kommt der Fluss ins Stocken, und im schlimmsten Fall kommen die Produkte gar nicht erst am Ende an.
		handles[x].setFrom(p0_startx + p0_geolength*x/(p0_length-1),p_y,p0_z)
		handles[x].setDir(0.1,0,0)


	# Pfad von zweiter Kiste ins Lager
	handles = VR.ptool.getHandles(VR.paths[1])
	p2_geolength = p2_endx - p2_startx
	for x in range (0,p2_length):
		handles[x].setFrom(p2_startx + p2_geolength*x/(p2_length-1),p_y,p2_z)
		handles[x].setDir(-1,0,0)
	
	
	VR.ptool.update()
	

	# Bis hierher werden nur die Wege mit den Haltepunkten erstellt, die Container sind noch nicht da.


	# ------------ logistics -------------
	
	if not hasattr(VR, 'log'):
		VR.log = VR.Factory.Logistics()
		VR.lnet = VR.log.addNetwork()
		r.addChild(VR.cardbox)
		r.addChild(VR.rohling)
		r.addChild(VR.felge1)
		r.addChild(VR.FRfelge0)
		r.addChild(VR.FRfelge1)
		r.addChild(VR.FRrohling)
	
	capacity0 = 1000 # ins Lager passt viel
	capacity1 = 10	# ist grade erstmal weniger, damit alles übersichtlich bleibt. Kann später gern mehr werden
	capacity2 = 10 # Hier steht am Ende eh keine Box, es wird alles direkt aufs Fließband gelegt. Kapazität sollte egal sein.
	capacity3 = 1000 # Endlager

	c0 = VR.log.addContainer(VR.cardbox)
	c0.setCapacity(capacity0)
	c1 = VR.log.addContainer(VR.cardbox)
	c1.setCapacity(capacity1)
	c2 = VR.log.addContainer(VR.cardbox)
	c2.setCapacity(capacity2)
	c3 = VR.log.addContainer(VR.cardbox)
	c3.setCapacity(capacity3)

	VR.containers = [c0,c1,c2,c3]

	

	# Pfad 0:
	p0 = VR.paths[0]
	lp = VR.log.addPath()
	n0 = None
	nodes = []
	
	for h in VR.ptool.getHandles(p0):
		n = VR.lnet.addNodes(1,n0)
		nodes.append(n)
		n.setTransform(h)
		n0 = n
		lp.add(n)
		nodes.append(n)
	nodes[0].set(c0)
	nodes[-1].set(c1)
	#VR.log.fillContainer(c0,capacity0,VR.product) #TODO (Alisa): Rausfinden, wie man regeln kann, dass nur ein bestimmter Anteil des aktuellen Füllstands losgeschickt wird.

	t1 = VR.log.addTransporter('Transporter_Rohling')
	t1.setPath(lp)
	t1.setSpeed(speed0)


	#Pfad 2:
	p2 = VR.paths[1]
	lp = VR.log.addPath()
	n2 = None
	nodes = []
	
	for h in VR.ptool.getHandles(p2):
		n = VR.lnet.addNodes(1,n2)
		nodes.append(n)
		n.setTransform(h)
		n2 = n
		lp.add(n)
		nodes.append(n)
	nodes[0].set(c2)
	nodes[-1].set(c3)
		
	t2 = VR.log.addTransporter('Transporter_Felge')
	t2.setPath(lp)
	t2.setSpeed(speed2)

</core>
    </Script>
    <Script name_suffix="0" base_name="LogisticsUpdate" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	if not hasattr(VR,'neuerauftrag_count'):
		VR.neuerauftrag_count = 1
	if not hasattr(VR, 'neuerauftrag_model'):
		VR.neuerauftrag_model = 0
	
	#=====Logging=====
	
	if hasattr(VR, 'log'):
		VR.log.update()
		
		# Aktualisiere Anzeigetafeln			
		if hasattr(VR, 'lagerlabel'):
			lagercount = VR.containers[0].getCount()
			text = 'Lager: ' + str(lagercount) + " / " + str(VR.containers[0].getCapacity())
			VR.lagerlabel.setText(text)
			VR.lagerlabel.setSize(len(text)*0.15,0.3)
			
			
		if hasattr(VR, 'container1_label'):
			container1_count = VR.containers[1].getCount()
			text1 = 'Füllstand: ' + str(container1_count) + " / " + str(VR.containers[1].getCapacity())
			VR.container1_label.setText(text1)
			VR.container1_label.setSize(len(text1)*0.1,0.2)
			
			
		if hasattr(VR, 'container2_label'):
			container2_count = VR.containers[2].getCount()
			text2 = 'Füllstand: ' + str(container2_count) + " / " + str(VR.containers[2].getCapacity())
			VR.container2_label.setText(text2)
			VR.container2_label.setSize(len(text2)*0.1,0.2)
			
			
		if hasattr(VR, 'fertiglabel'):
			fertig_count = VR.containers[3].getCount()
			textLager = 'Fertig: ' + str(fertig_count) + " / " + str(VR.containers[3].getCapacity())
			VR.fertiglabel.setText(textLager)
			VR.fertiglabel.setSize(len(textLager)*0.15,0.3)
		
		
		if hasattr(VR, 'neuerAuftragLabel'):
			textAuftrag = 'Neuer Auftrag: ' + str(VR.neuerauftrag_count) + " Felgen Typ " + str(VR.neuerauftrag_model)
			VR.neuerAuftragLabel.setText(textAuftrag)
			VR.neuerAuftragLabel.setSize(len(textAuftrag)*0.15,0.3)
			

	
	#=====Starte einen Roboter-Fräs-Durchlauf=====
	if hasattr(VR, 'containers'):
		if (VR.currentState == VR.states_WaitForRohling and (not VR.containers[1].isEmpty())):
			c1 = VR.containers[1]
			product = c1.get()
			bla = 1
			VR.logisticController.start(product)
	
	
	#=====Prüfe, ob Auftrag beendet=====
	if (hasattr(VR, 'containers')):
		if (VR.containers[3].isFull()):
			VR.auftragFertig = True
	
	
	
	# Wir kriegen wahrsch noch für die Container Notifications immer wenn ein neues Teil reinfällt,
	# brauchen wir für ne bessere Anzeige, wie viele Produkte fertig sind / durchgelaufen sind,
	# ohne auf die Anzeige fürs hintere Lager angewiesen zu sein oder komisch rumrechnen zu müssen
	# ist bestimmt auch für andere Sachen nützlich.
	# Wird in etwa so aussehen:
	
	#def f(e):
	#	print e
	#
	#container.addNotification(f)
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="ParseGCode" name_space="__script__" type="Python" mobile="">
      <core>
	import re
	import VR
	import math
	
	#notwendeig damit der pfad auch am Fräskopf ist
	debugx = -0.02
	debugy = 0.145
	debugz = -0.12
	
	#Path Scaling
	_XSCALE = 0.0055
	_YSCALE = 0.0055
	_ZSCALE = 0.0055
	_XOFFSET = -0.25
	_YOFFSET = -0.75
	_ZOFFSET = 0.1
	
	#For line maching
	regexG00 = re.compile('G00.*')
	regexG01 = re.compile('G01.*')
	regexG02 = re.compile('G02.*')
	regexG03 = re.compile('G03.*')
	regexG17 = re.compile('G17.*')
	regexG18 = re.compile('G18.*')
	regexG19 = re.compile('G19.*')
	regexOther = re.compile('X-?[0-9]+\.?[0-9]* Y-?[0-9]+\.?[0-9]*.*')
	

			
	class Parser:
		""" nicht nötig in python
		self.lastPos
		self.lastOrient
		self.lines
		self.currentLine
		self.coordinates #array with ALL endpoints (to detect circles)
		self.plane
		"""
		def __init__(self,path):
			self.lastPos = [0,0,0]
			self.lastOrient = [0,0,-1]
			self.currentLine = 0
			self.plane = "Z"
			self.lines = []
			self.coordinates = []
			
			with open(path) as file:
				for line in file:
					if (regexG00.match(line) or regexG01.match(line) or regexG02.match(line) or regexG03.match(line) or regexG17.match(line) or regexG18.match(line) or regexG19.match(line)):
						self.lines.append(line)
					elif regexOther.match(line):
						newLine = self.lines[(len(self.lines) - 1)][:4] + line
						self.lines.append(newLine)
			
		def hasNext(self):
			if self.currentLine &gt; len(self.lines)-1:
				return False
			return True
			
		def ParseLine(self):
		#returns [p1, p2, p3, pd, loch (None oder True), Zeit]
			line = self.lines[self.currentLine]
			print line
			p1 = VR.Path()
			p2 = VR.Path()
			p3 = VR.Path()
			pd = VR.Path()
			p1.addPoint(self.lastPos, self.lastOrient, [0,0,0], [0,0,0])
			p2.addPoint([self.lastPos[0], self.lastPos[1], 0], self.lastOrient, [0,0,0], [0,0,0])
			p3.addPoint([self.lastPos[0], 0, 0], self.lastOrient, [0,0,0], [0,0,0])
			pd.addPoint([self.lastPos[0]+debugx, self.lastPos[1]+debugy, self.lastPos[2]+debugz], self.lastOrient, [0,0,0], [0,0,0])
			
			#reset after last line
			if self.currentLine &gt; (len(self.lines) - 1):
				print "Reset"
				p1.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				p2.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				p3.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				pd.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				out = [p1,p2,p3,pd,None,1]
			
			self.currentLine += 1
			
			if regexG00.match(line):
				newX = self.lastPos[0]
				newY = self.lastPos[1]
				newZ = self.lastPos[2]
		
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newX = float(xCoord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newY = float(xCoord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newZ = -(float(xCoord[1:]) * _ZSCALE) + _ZOFFSET
			
				p1.addPoint([newX, newY, newZ], self.lastOrient, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], self.lastOrient, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], self.lastOrient, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], self.lastOrient, [0,0,0], [0,0,0])
				
				p1.compute(2)
				p2.compute(2)
				p3.compute(2)
				pd.compute(2)
				
				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
				
				self.coordinates.append([newX, newY, newZ])
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 1]
				
				return out
				
			if regexG01.match(line):
				newX = self.lastPos[0]
				newY = self.lastPos[1]
				newZ = self.lastPos[2]
		
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newX = float(xCoord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newY = float(xCoord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newZ = -(float(xCoord[1:]) * _ZSCALE) + _ZOFFSET
			
				p1.addPoint([newX, newY, newZ], self.lastOrient, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], self.lastOrient, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], self.lastOrient, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], self.lastOrient, [0,0,0], [0,0,0])
				
				p1.compute(2)
				p2.compute(2)
				p3.compute(2)
				pd.compute(2)
				
				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
				
				self.coordinates.append([newX, newY, newZ])
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 1.5]
				
				return out
		
		
			if regexG17.match(line):
				self.plane = "Z"
			
			if regexG18.match(line):
				self.plane = "Y"
			
			if regexG19.match(line):
				self.plane = "X"
		
			if regexG02.match(line):
				newX = 0
				newY = 0
				newZ = 0
				
				centerX = self.lastPos[0]
				centerY = self.lastPos[1]
				centerZ = self.lastPos[2]
			
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newX = float(coord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newY = float(coord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newZ = -(float(coord[1:]) * _ZSCALE) + _ZOFFSET
				
		
				tmpReg = re.compile('I-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerX += (float(coord[1:]) * _XSCALE)
					
				tmpReg = re.compile('J-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerY += (float(coord[1:]) * _YSCALE)
				
				tmpReg = re.compile('K-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerZ += -(float(coord[1:]) * _ZSCALE)
					
					
				radius = math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2))
				angle = math.degrees(math.acos((((self.lastPos[0]-centerX) * (newX-centerX)) + ((self.lastPos[1]-centerY) * (newY-centerY)) + ((self.lastPos[2]-centerZ) * (newZ-centerZ))) / (math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2)) * (math.sqrt(math.pow((newX-centerX), 2) + math.pow((newY-centerY), 2) + math.pow((newZ-centerZ), 2))))))
				
				orientation = []
				
				if self.plane == "Z":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[0]-centerX))) + math.radians(angle + 90)
					orientation = [math.sin(tmpAngle), math.cos(tmpAngle), self.lastOrient[2]]

				if self.plane == "Y":
					tmpAngle = math.atan(abs((self.lastPos[2]-centerZ)/(self.lastPos[0]-centerX))) + math.radians(angle + 90)
					orientation = [math.sin(tmpAngle), self.lastOrtient[1], math.cos(tmpAngle)]
					
				if self.plane == "X":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[2]-centerZ))) + math.radians(angle + 90)
					orientation = [self.lastOrient[0], math.sin(tmpAngle), math.cos(tmpAngle)]

				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
						
				self.coordinates.append([newX, newY, newZ])
				
				p1.addPoint([newX, newY, newZ], orientation, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], orientation, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], orientation, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], orientation, [0,0,0], [0,0,0])
				
				p1.compute(3)
				p2.compute(3)
				p3.compute(3)
				pd.compute(3)
				
				self.lastOrient = orientation
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 2]
				
				return out
			
			
			if regexG03.match(line):
				newX = 0
				newY = 0
				newZ = 0
				
				centerX = self.lastPos[0]
				centerY = self.lastPos[1]
				centerZ = self.lastPos[2]
			
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newX = float(coord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newY = float(coord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newZ = -(float(coord[1:]) * _ZSCALE) + _ZOFFSET
				
		
				tmpReg = re.compile('I-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerX += (float(coord[1:]) * _XSCALE)
					
				tmpReg = re.compile('J-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerY += (float(coord[1:]) * _YSCALE)
				
				tmpReg = re.compile('K-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerZ += -(float(coord[1:]) * _ZSCALE)
					
					
				radius = math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2))
				angle = math.degrees(math.acos((((self.lastPos[0]-centerX) * (newX-centerX)) + ((self.lastPos[1]-centerY) * (newY-centerY)) + ((self.lastPos[2]-centerZ) * (newZ-centerZ))) / (math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2)) * (math.sqrt(math.pow((newX-centerX), 2) + math.pow((newY-centerY), 2) + math.pow((newZ-centerZ), 2))))))
				
				orientation = []
				
				if self.plane == "Z":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[0]-centerX))) + math.radians(angle - 90)
					orientation = [math.sin(tmpAngle), math.cos(tmpAngle), self.lastOrient[2]]

				if self.plane == "Y":
					tmpAngle = math.atan(abs((self.lastPos[2]-centerZ)/(self.lastPos[0]-centerX))) + math.radians(angle - 90)
					orientation = [math.sin(tmpAngle), self.lastOrtient[1], math.cos(tmpAngle)]
					
				if self.plane == "X":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[2]-centerZ))) + math.radians(angle - 90)
					orientation = [self.lastOrient[0], math.sin(tmpAngle), math.cos(tmpAngle)]

				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
						
				self.coordinates.append([newX, newY, newZ])
				
				p1.addPoint([newX, newY, newZ], orientation, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], orientation, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], orientation, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], orientation, [0,0,0], [0,0,0])
				
				p1.compute(3)
				p2.compute(3)
				p3.compute(3)
				pd.compute(3)
				
				self.lastOrient = orientation				
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 2]
				
				return out
		

	return Parser(filepath)



				
</core>
      <arg type="str" value="NewModell1.nc" name_suffix="0" base_name="filepath" name_space="ParseGCode"/>
    </Script>
    <Script name_suffix="0" base_name="RobotAnimation" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import time
	import math

	#VR.robotController.move_a1(100)
	#VR.robotController.move_a2(-40)
	#VR.robotController.move_a3(20)
	#VR.robotController.move_a4(90)
	VR.robotController.move_a5(30)
	#VR.robotController.greifen()
	
</core>
    </Script>
    <Script name_suffix="0" base_name="RobotControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	Pi = math.pi
	
	class RobotController:
		#colorVector Konstante für die Animation
		c = [0,0,0]
		
	
		def __init__(self):
			#geometrie laden
			
			print "initialisiere Roboterklasse"
			if hasattr(VR, 'robot'):
				VR.robot.destroy()
			VR.robot = VR.loadGeometry('AlleTeile_mitFarbe.dae', True)
			#VR.robot = VR.loadGeometry('Alle_teile.dae', True)
			light = VR.getRoot().find('Headlight')
			light.addChild(VR.robot)
			VR.robot.rotate(1,0,0, -0.5 * math.pi)
			VR.robot.translate(-4,0,4)
			VR.robot.setScale(0.3,0.3,0.3)
			#RobotController.kalkuliereGreifPfad(self)
			
			#Winkel initalisieren
			self.winkelA1 = 0
			self.winkelA2 = 0
			self.winkelA3 = 0
			self.winkelA4 = 0
			self.winkelA5 = 0
			
			self.movingArms = [0, 0, 0, 0, 0]
			

		#Punkte: In mm relativ zu Roboter-Ursprung Format [x,y,z]
		#Richtung: Von da aus den Punkt anfahren
		#Objekt: Rohling / Felge
		def move(self,startpunkt,startrichtung,endpunkt,endrichtung,objekt):
			print "move called"
			# Bewegung
		
			# Felge nehmen
		
		# Felge ablegen
			# In neutrale Ausgangsstellung zurück
		
			#fertig
			print "Move done, callback Logistik"
			VR.logisticController.moveDone(objekt)
		
		#Zum löschen
		def destroy(self):
			if hasattr(VR, 'robot'):
				VR.robot.destroy()
				
		#Arm1 bewegen
		def move_a1(self, winkel_deg):
			arm = VR.robot.find('r_Arm1')
			f = arm.getFrom()
			d = arm.getDir()
			u = arm.getUp()
			
			#Werte sichern
			self.winkelA1 += winkel_deg
			self.winkelA1 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA1)
			
			#Animation starten
			path = self.x_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			arm.animate(path,anTime,0,True)
			del arm, f, u, d, path, anTime

		
		#Arm2 bewegen
		def move_a2(self, winkel_deg):
			arm = VR.robot.find('r_Arm2')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			#Werte sichern
			self.winkelA2 += winkel_deg
			self.winkelA2 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA2)
			
			#Animation starten
			path = self.y_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			arm.animate(path,anTime,0,True)
			del arm, f, u, d, path, anTime
			
		#Arm3 bewegen
		def move_a3(self, winkel_deg):
			arm = VR.robot.find('r_Motor_oben')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			#Werte sichern
			self.winkelA3 += winkel_deg
			self.winkelA3 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA3)
			
			#Animation starten
			path = self.y_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			arm.animate(path,anTime,0,True)
			del arm, f, u, d, path, anTime
		
		#Arm4 bewegen
		def move_a4(self, winkel_deg):
			arm = VR.robot.find('r_Arm4')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			
			#Werte sichern
			self.winkelA4 += winkel_deg
			self.winkelA4 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA4)
			
			#print u, d
			#up_zielVector = [0, math.cos(winkel_rad), math.sin(winkel_rad)]
			#dir_zielVector =[0, math.sin(winkel_rad), -math.cos(winkel_rad)]
			#print up_zielVector, dir_zielVector
			#return
			
			#Animation starten
			path = self.z_rotatePath(f, u, d, winkel_deg, winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			arm.animate(path,anTime,0,True)
			del arm, f, u, d, path, anTime
			
		#Arm5 bewegen
		def move_a5(self, winkel_deg):
			arm = VR.robot.find('r_Arm5')
			f = arm.getFrom()
			u = arm.getUp()
			d = arm.getDir()
			
			
			#Werte sichern
			self.winkelA5 += winkel_deg
			self.winkelA5 %= 360
			
			#Zielwinkel im Bogenmaß berechnen berechnen
			winkel_rad = math.radians(self.winkelA5)
			
			#Animation starten
			path = self.y_rotatePath(f, u, d, winkel_deg,winkel_rad)
			anTime = self.animationTime(6, winkel_deg)
			arm.animate(path,anTime,0,True)
			del arm, f, u, d, path, anTime
			
			
		#Greifen
		def greifen(self):
			if hasattr(RobotController, 'lpath'):
				RobotController.lpath.invert()
				RobotController.rpath.invert()
				
			else :
				#feste Positionen für Hinweg
				lf = [0.24, 0.79, -0.00]
				lu = [0,0,1]
				ld = [0,-1,0]
	
				rf = [0.24, -0.80, 0.00]
				ru = [0,0,1]
				rd = [0,1,0]
	
				lpath = VR.Path()
				rpath = VR.Path()
				#Punkte hinzufügen
				new_lf = lf[:]
				new_lf[1] -= 0.2
				lpath.addPoint(lf,ld,VR.robotController.c,lu)
				lpath.addPoint(new_lf,ld,VR.robotController.c,lu)
	
				new_rf = rf[:]
				new_rf[1] += 0.2
				rpath.addPoint(rf,rd,VR.robotController.c,ru)
				rpath.addPoint(new_rf,rd,VR.robotController.c,ru)
				#Pfade erstellen
				lpath.compute(80)
				rpath.compute(80)
				RobotController.lpath = lpath
				RobotController.rpath = rpath
		
			
			arm_l = VR.robot.find('Arm_links')
			arm_r = VR.robot.find('Arm_rechts')
	
			
			arm_l.animate(RobotController.lpath,1,0.1,False)
			arm_r.animate(RobotController.rpath,1,0.1,False)
		
		#öffnen
		def oeffnen(self):
			if hasattr(RobotController, 'lpath'):
				RobotController.lpath.invert()
				RobotController.rpath.invert()
			
				arm_l = VR.robot.find('Arm_links')
				arm_r = VR.robot.find('Arm_rechts')
	
			
				arm_l.animate(RobotController.lpath,1,0.1,False)
				arm_r.animate(RobotController.rpath,1,0.1,False)
			else:
				return
				
		# Pfad für Drehung in der y-Achse
		def y_rotatePath(self, f, u, d, winkel_deg, zielWinkel_rad):
			zielVector = [math.sin(zielWinkel_rad),0,-math.cos(zielWinkel_rad)]
			path = VR.Path()
			path.addPoint(f,d,VR.robotController.c,u)
			if (winkel_deg == 180) | (winkel_deg == -180) :
				zwischenVec = [math.sin(zielWinkel_rad - (winkel_deg/2)),0,-math.cos(zielWinkel_rad - (winkel_deg/2))]
				path.addPoint(f,zwischenVec,RobotController.c,u)
				del zwischenVec
			path.addPoint(f,zielVector,RobotController.c,u)
			path.compute(80)
			return path
			
		# Pfad für Drehung in der x-Achse
		def x_rotatePath(self, f, u, d, winkel_deg, zielWinkel_rad):
			zielVector = [math.sin(zielWinkel_rad),math.cos(zielWinkel_rad),0]
			path = VR.Path()
			path.addPoint(f,d,RobotController.c,u)
			if (winkel_deg == 180) | (winkel_deg == -180) :
				zwischenVec = [math.sin(zielWinkel_rad - (winkel_deg/2)),math.cos(zielWinkel_rad - (winkel_deg/2)),0]
				path.addPoint(f,d,RobotController.c,zwischenVec)#
				del zwischenVec
			path.addPoint(f,d,RobotController.c,zielVector)
			path.compute(80)
			return path
			
		# Pfad für Drehung in der z-Achse
		def z_rotatePath(self, f, u, d, winkel_deg, zielWinkel_rad):
			up_zielVector = [0, math.cos(zielWinkel_rad), math.sin(zielWinkel_rad)]
			dir_zielVector =[0, math.sin(zielWinkel_rad), -math.cos(zielWinkel_rad)]
			path = VR.Path()
			path.addPoint(f,d,RobotController.c,u)
			if (winkel_deg == 180) | (winkel_deg == -180) :
				zwischenWinkel = zielWinkel_rad - (winkel_deg/2)
				up_zwischenVec = [0, math.cos(zwischenWinkel), math.sin(zwischenWinkel)]
				dir_zwischenVec =[0, math.sin(zwischenWinkel), -math.cos(zwischenWinkel)]
				path.addPoint(f, dir_zwischenVec,RobotController.c, up_zwischenVec)
				del zwischenWinkel, up_zwischenVec, dir_zwischenVec
			path.addPoint(f,dir_zielVector,RobotController.c,up_zielVector)
			path.compute(80)
			return path
			
		# Zeit für animation berechnen
		def animationTime(self, roationSpeed, winkel_deg):
			anTime = math.fabs(roationSpeed * (winkel_deg/360.0))
			if anTime &lt; 1 :
				anTime = 1
			return anTime
			
		# Bewungsarray beenden und Benachrtigungs funktionen aufrufen
		def endAnimation(self, armIndex):
			self.movingArms[armIndex] = 0
			
		
		
		
	#if hasattr(VR, 'robotController'):
	#	VR.robotController.destroy()
		
	VR.robotController = RobotController()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="6" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	help(VR.Factory)
</core>
    </Script>
    <Script name_suffix="0" base_name="initAnzeigetafeln" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#die Nb: x - Anzeigen kommen noch weg.
	
	r = VR.getRoot().find('Headlight')
	# Füllstand Lager
	if not hasattr(VR, 'lagerlabel'):
		r = VR.getRoot().find('Headlight')
		VR.lagerlabel = VR.Sprite('lager-label')
		mat1 = VR.Material('mymat1')
		VR.lagerlabel.setMaterial(mat1)
		r.addChild(VR.lagerlabel)
	
	VR.lagerlabel.setFrom(7.5,2,1)
	VR.lagerlabel.setDir(1,0,0)
	VR.lagerlabel.setText('Voll')
	VR.lagerlabel.setSize(0.4,0.2)
	
	# Füllstand erste Box
	if not hasattr(VR, 'container1_label'):
		VR.container1_label= VR.Sprite('fuellstand1')
		mat2 = VR.Material('mymat2') # wenn die Sprites nicht ihr eigenes Material haben, steht überall das selbe.
		VR.container1_label.setMaterial(mat2)
		r.addChild(VR.container1_label)
	
	VR.container1_label.setFrom(-4.5,2,1)
	VR.container1_label.setDir(1,0,0)
	
	
	# Füllstand zweite Box - die sollte am ende immer ziemlich leer sein, da alles direkt weiter ins Lager läuft
	if not hasattr(VR, 'container2_label'):
		VR.container2_label= VR.Sprite('fuellstand2')
		mat22 = VR.Material('mymat22') # wenn die Sprites nicht ihr eigenes Material haben, steht überall das selbe.
		VR.container2_label.setMaterial(mat22)
		r.addChild(VR.container2_label)
	
	VR.container2_label.setFrom(-4.5,2,7)
	VR.container2_label.setDir(1,0,0)
	
	
	# Angekommen zur Weiterverarbeitung
	if not hasattr(VR, 'weiterverarbeitung_label'):
		VR.fertiglabel = VR.Sprite('fertig')
		mat3 = VR.Material('mymat3')
		VR.fertiglabel.setMaterial(mat3)
		r.addChild(VR.fertiglabel)
		
	VR.fertiglabel.setFrom(7.5,2,7)
	VR.fertiglabel.setDir(1,0,0)
	
	
	#Auftrag erstellen
	if not hasattr(VR, 'neuerAuftragLabel'):
		VR.neuerAuftragLabel = VR.Sprite('neuerAuftrag')
		mat4 = VR.Material('mymatAuftrag')
		VR.neuerAuftragLabel.setMaterial(mat4)
		r.addChild(VR.neuerAuftragLabel)
	VR.neuerAuftragLabel.setFrom(0,4.3,-0.5)
	VR.neuerAuftragLabel.setDir(0,0,1)
	
	
	
	
	
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="initFraese" name_space="__script__" type="Python" mobile="">
      <core>
	import VR

	class LC:
		def fraeseDone(self,object):
			print "Callback done"
		
#	VR.logisticController = LC()

	
#	VR.FreaseControl(VR.getRoot().find('Headlight'))
#	VR.fraeseController.startFraese(rohling,0)
	

</core>
    </Script>
    <Script name_suffix="0" base_name="initScene" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# materials
	
	mbricks = VR.Material('mbricks')
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.95
	tg.add('Perlin', 1, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/4, [cp,cp,cp], [1,1,1])
	tg.add('Bricks', 1, [0.4,0.4,0.4], [1,1,1])
	mbricks.setTexture(tg.compose(0))
	
	mcarboard = VR.Material('mcarboard')
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	tg.add('Perlin', 1, [0.5,0.3,0.1], [0.6,0.4,0.1])
	tg.add('Perlin', 1.0/4, [0.5,0.3,0.1], [0.7,0.6,0.2])
	mcarboard.setTexture(tg.compose(0))
	
	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)
	mchrome = VR.Material('mchrome')
	setMetalic(mchrome, 0.25, 0.4, 0.77, 0.6)
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.6
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	mchrome.setTexture(tg.compose(0))
	mchrome.addPass()
	setMetalic(mchrome, 0.25, 0.9, 1, 0.6)
	mchrome.setTexture(tg.compose(1))
	mchrome.setTextureType('SphereEnv')
	mchrome.setTransparency(0.4)
	
	# geometries
	
	floor = VR.Geometry('floor')
	floor.setPrimitive('Plane 20 20 20 20')
	floor.setMaterial(mbricks)
	floor.setTexCoords(floor.getPositions())
	floor.setPose([0,0,0], [0,1,0], [1,0,0])
	root = VR.getRoot().find('Headlight')
	root.addChild(floor)
	
	VR.cardbox = VR.Geometry('cardbox')
	VR.cardbox.setPrimitive('Box 1 1 1 1')
	VR.cardbox.setMaterial(mcarboard)
	VR.cardbox.hide()
	
	VR.rohling = VR.Geometry('tt1')
	VR.rohling.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	root.addChild(VR.rohling)
	VR.rohling.setMaterial(mchrome)#Alisa sagt: Ja ich weiß dass das das gleiche ist. ist mir grade egal.
	VR.rohling.setTexCoords(VR.rohling.getPositions())
	VR.rohling.hide()
	
	#Erstelle Geometrie für Felge0. Einzelne Instanzen können hinterher mit VR.felge0.duplicate() geholt werden.
	u1 = VR.Geometry('u1')
	u2 = VR.Geometry('u2')
	u1.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	u2.setPrimitive('Box 0.12 0.1 0.2 1 1 1')
	u2.setFrom(0,0.05,0.02)
	VR.felge0 = VR.CSGGeometry('felge0')
	VR.felge0.addChild(u1)
	VR.felge0.addChild(u2)
	VR.felge0.setOperation('subtract')
	root.addChild(VR.felge0)
	VR.felge0.setEditMode(0)
	VR.felge0.setMaterial(mchrome)
	VR.felge0.setTexCoords(VR.felge0.getPositions())
	VR.felge0.hide()
	
	#Erstelle Geometrie für Felge1
	t1 = VR.Geometry('t1')
	t2 = VR.Geometry('t2')
	t1.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	t2.setPrimitive('Box 0.12 0.1 0.2 1 1 1')
	t2.setFrom(0,0.05,0.02)
	VR.felge1 = VR.CSGGeometry('felge1')
	VR.felge1.addChild(t1)
	VR.felge1.addChild(t2)
	VR.felge1.setOperation('subtract')
	root.addChild(VR.felge1)
	VR.felge1.setEditMode(0)
	VR.felge1.setMaterial(mchrome)
	VR.felge1.setTexCoords(VR.felge1.getPositions())
	VR.felge1.hide()
	
	VR.FRrohling = VR.loadGeometry('rimSaab_Rohling.dae')
	VR.FRrohling.hide()

	VR.FRfelge0 = VR.loadGeometry('rim_saab.dae')
	VR.FRfelge1 = VR.loadGeometry('rim_saab.dae')
	VR.FRfelge0.hide()
	VR.FRfelge1.hide()
	
	
	test = VR.rohling.duplicate()
	
	
	
	
</core>
    </Script>
    <Script name_suffix="1" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	VR.initScene()
	VR.LogisticsInit()
	VR.initFraese()
	#TODO von Alisa (29.5.): Wir könnten überlegen, alle Initialisierungsskripte
	#hierüber zu starten, sodass nur dieses Skript den on_scene_load-Trigger hat.
	#Dann hätten wir ne bisschen bessere Kontrolle über die Reihenfolge.
	#Kann aber für unser Projekt auch überflüssig sein.
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="mat_Chrome" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#if hasattr(VR, 'chrome'):
	#	return VR.chrome
	
	#http://devernay.free.fr/cours/opengl/materials.html
	
	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)	
	
	VR.chrome = VR.Material('Chrome')
	setMetalic(VR.chrome, 0.25, 0.4, 0.77, 0.6) #chrome
	#VR.chrome.setDiffuse([d,d,d])
	
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.6
	
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	VR.chrome.setTexture(tg.compose(0))
	#return VR.chrome
	
	VR.chrome.addPass()
	setMetalic(VR.chrome, 0.25, 0.9, 1, 0.6)
	VR.chrome.setTexture('metal5.jpg')
	VR.chrome.setTextureType('SphereEnv')
	VR.chrome.setTransparency(0.4)
	
	return VR.chrome
</core>
    </Script>
    <Script name_suffix="0" base_name="monitorControls" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	if not hasattr(VR,'auftragqueue'):
		VR.auftragqueue = Queue() # Enthält Aufträge in der Form [Anzahl,Modell]
	if not hasattr(VR,'neuerauftrag_count'):
		VR.neuerauftrag_count = 1
	if not hasattr(VR, 'neuerauftrag_model'):
		VR.neuerauftrag_model = 0
	
	
	#Die Klasse hat einen Trigger für das Device mobile mit -1
	#-1 bedeutet die Klasse reagiert auf alles was iwie mit der Webseite ist
	#Wir können dann hier kucken, welcher Knopf gedrückt wurde
	#und entsprechend Sachen tun.
	
	k = dev.getKey()
	print k
	
	if (k == 101):
		#So den gedrückten Knopf finden
		if (VR.neuerauftrag_model == 0): VR.neuerauftrag_model = 1
		else: VR.neuerauftrag_model = 0
		print "Wähle Modell " + str(VR.neuerauftrag_model)
	if (k == 102):
		VR.neuerauftrag_count = VR.neuerauftrag_count + 1
		print "Anzahl: " + str(VR.neuerauftrag_count)
	if (k == 103):
		if (VR.neuerauftrag_count &lt;= 1):
			print "Ein Auftrag kann nicht weniger als eine Felge enthalten."
		else:
			VR.neuerauftrag_count = VR.neuerauftrag_count -1
			print "Anzahl: " + str(VR.neuerauftrag_count)
	if (k == 104):
		print "Reset Anzahl und Modell. TODO starte Auftrag für " + str(VR.neuerauftrag_count) + " Felgen Typ " + str(VR.neuerauftrag_model)
		VR.auftragqueue.put([VR.neuerauftrag_count,VR.neuerauftrag_model])
		VR.neuerauftrag_count = 1
		VR.neuerauftrag_model = 0
		
</core>
      <trig type="on_device" dev="mobile" state="Pressed" param="" key="-1" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="monitorInit" name_space="__script__" type="Python" mobile="">
      <core>
	import VR	
	
	mat = VR.Material('gui')
	mat.setLit(False)
	
	geo = VR.Geometry('gui')
	#erste beiden zahlen: breite und höhe
	geo.setPrimitive('Plane 2 2 1 1')
	geo.setMaterial(mat)
	geo.setPose([0,5,0],[0,0,-1],[0,-1,0])
	
	r = VR.getRoot()
	r.addChild(geo)
	
	cef = VR.CEF()
	cef.setMaterial(mat)
	cef.open('http://localhost:5500/monitorWebsite')
	cef.addMouse(mouse, geo, 0, 2, 3, 4)
	cef.addMouse(flystick, geo, 0, 2, 3, 4)
	cef.addKeyboard(keyboard)
	cef.setAspectRatio(2)
</core>
      <arg type="VRPyDeviceType" value="flystick" name_suffix="0" base_name="flystick" name_space="monitorInit"/>
      <arg type="VRPyDeviceType" value="keyboard" name_suffix="0" base_name="keyboard" name_space="monitorInit"/>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="mouse" name_space="monitorInit"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="monitorWebsite" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html&gt;

&lt;head&gt;
 &lt;style type="text/css"&gt;
  body {font-size:200%;
		text-align:center;
		background:#fff0e0;
		color:#ff6622}
  button {font-size:120%;
		padding:3%;
		padding-left:10%;
		padding-right:10%;}
  table {width:95%;
		padding-left:2%;
		padding-right:2%;
		margin-left:auto; 
		margin-right:auto;
		background:#f9f9ff;}
  td	{height:170px; 
		width:33%;}
 &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
 &lt;script&gt;
  function get(b,s) {
   var xmlHttp = new XMLHttpRequest();
   var uri = document.URL+'mobile?button='+b+'&amp;state='+s;
   xmlHttp.open( "GET", uri, true );
   xmlHttp.send( null );
  }
 &lt;/script&gt;

&lt;table&gt; 
 &lt;tr&gt;
	&lt;td&gt;&lt;/td&gt;
	&lt;td&gt;&lt;h1&gt;Tolle Auftragsbearbeitung&lt;/h1&gt;
	Linker Knopf: Modell. Mittlere Knöpfe: Anzahl.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
	&lt;td&gt;&lt;button onmousedown='get(101,1)' onmouseup='get(103,0)' type='button'&gt;toggle modell&lt;/button&gt;&lt;/td&gt;
	&lt;td&gt;&lt;button onmousedown='get(102,1)' onmouseup='get(104,0)' type='button'&gt;+&lt;/button&gt;&lt;/td&gt;
	&lt;td&gt;&lt;button onmousedown='get(103,1)' onmouseup='get(105,0)' type='button'&gt;-&lt;/button&gt;&lt;/td&gt;
	&lt;td&gt;&lt;button onmousedown='get(104,1)' onmouseup='get(102,0)' type='button'&gt;Start&lt;/button&gt;&lt;/td&gt;
	
 &lt;/tr&gt;
&lt;/table&gt;
Funktionalität ist da. Feedback bisher nur über Log-Ausgaben und Sprite, nicht ueber Webseite.
&lt;/body&gt;

&lt;/html&gt;

</core>
    </Script>
    <Script name_suffix="0" base_name="platzhalter_fraese" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	return
	
	#erzeugt einen quader, wo später die fräse steht. macht sonst nichts.
	
	mcarboard = VR.Material('mcarboard')
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	tg.add('Perlin', 1, [0.3,0.3,0.3], [0.5,0.5,0.5])
	mcarboard.setTexture(tg.compose(0))
	
	VR.rob = VR.Geometry('Roboter Platzhalter')
	VR.rob.setPrimitive('Box 1 3 3 1')
	VR.rob.setMaterial(mcarboard)
	
	VR.rob.setFrom(-6,1,4)
	
	r = VR.getRoot().find('Headlight')
	r.addChild(VR.rob)
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="3" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="roboter_pickandplace" name_space="__script__" type="Python" mobile="">
      <core>
	#Alisa (29.05.): Die Klasse ist alt, war nur ein Platzhalter um die Objekte 
	#unabhängig von der eingebauten Logistiksimulation vom einen in den anderen
	#Container zu bewegen. Ich lass den Code mal noch drin, um Sachen nachschauen
	#zu können. Ausgeführt wird aber nichts mehr.
	return
	
	import VR
	import signal, sys
	
		
	c1 = VR.containers[1]
	c2 = VR.containers[2]
	
	bearbeitungszeit_sekunden = 3
	
	if not hasattr(VR, 'teilInBearbeitung'):
		VR.teilInBearbeitung = False
	
	#Das sollten wir später ersetzen durch nen Aufruf von sonstwo
	#wenn die Animation ("Simulation"...) fertig ist
	# fügt das (im moment gleiche) Objekt in den 2. Container
	# Wir müssen noch dran denken dass wir das objekt ersetzen
	def handler(signum, frame):
		print "Objekt empfangen. Hält Obj:" + str(VR.teilInBearbeitung)
		VR.teilInBearbeitung = False
		c2.add(objekt)
	
	
	if not(c1.isEmpty() or VR.teilInBearbeitung):
		objekt = c1.get()
		#c2.add(objekt)
		signal.signal(signal.SIGALRM, handler)
		signal.setitimer(signal.ITIMER_REAL,bearbeitungszeit_sekunden)
		print "Signal gesendet" + str(VR.teilInBearbeitung)
		VR.teilInBearbeitung = True
	elif (VR.teilInBearbeitung):
		print "Roboter hält schon Objekt, nimm kein neues"
		
	
</core>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" path="" type="0"/>
  <Navigation active="FlyWalk"/>
  <Materials/>
</Scene>
